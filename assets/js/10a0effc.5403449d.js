"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[3182],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return m}});var r=e(67294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function c(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?c(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},c=Object.keys(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var u=r.createContext({}),s=function(n){var t=r.useContext(u),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},l=function(n){var t=s(n.components);return r.createElement(u.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,c=n.originalType,u=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),k=s(e),m=a,d=k["".concat(u,".").concat(m)]||k[m]||p[m]||c;return e?r.createElement(d,i(i({ref:t},l),{},{components:e})):r.createElement(d,i({ref:t},l))}));function m(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var c=e.length,i=new Array(c);i[0]=k;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=n,o.mdxType="string"==typeof n?n:a,i[1]=o;for(var s=2;s<c;s++)i[s]=e[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}k.displayName="MDXCreateElement"},20134:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return k}});var r=e(83117),a=e(80102),c=(e(67294),e(3905)),i=["components"],o={},u="4.1 \u56de\u6eaf\u7b97\u6cd5\u56e2\u706d\u5b50\u96c6\u3001\u6392\u5217\u3001\u7ec4\u5408\u95ee\u9898",s={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408",title:"4.1 \u56de\u6eaf\u7b97\u6cd5\u56e2\u706d\u5b50\u96c6\u3001\u6392\u5217\u3001\u7ec4\u5408\u95ee\u9898",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5b50\u96c6\u6392\u5217\u7ec4\u5408.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"5.5 \u5982\u4f55\u53bb\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u5143\u7d20",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5982\u4f55\u53bb\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u5143\u7d20"},next:{title:"5.10 \u5982\u4f55\u8c03\u5ea6\u8003\u751f\u7684\u5ea7\u4f4d",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/\u5ea7\u4f4d\u8c03\u5ea6"}},l=[{value:"4.1.1 \u5b50\u96c6",id:"411-\u5b50\u96c6",children:[],level:3},{value:"4.1.2 \u7ec4\u5408",id:"412-\u7ec4\u5408",children:[],level:3},{value:"4.1.3 \u6392\u5217",id:"413-\u6392\u5217",children:[],level:3}],p={toc:l};function k(n){var t=n.components,e=(0,a.Z)(n,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"41-\u56de\u6eaf\u7b97\u6cd5\u56e2\u706d\u5b50\u96c6\u6392\u5217\u7ec4\u5408\u95ee\u9898"},"4.1 \u56de\u6eaf\u7b97\u6cd5\u56e2\u706d\u5b50\u96c6\u3001\u6392\u5217\u3001\u7ec4\u5408\u95ee\u9898"),(0,c.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/subsets"},"78.\u5b50\u96c6")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/permutations"},"46.\u5168\u6392\u5217")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/combinations"},"77.\u7ec4\u5408")),(0,c.kt)("h3",{id:"411-\u5b50\u96c6"},"4.1.1 \u5b50\u96c6"),(0,c.kt)("p",null,"\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u8f93\u5165\u4e00\u4e2a",(0,c.kt)("strong",{parentName:"p"},"\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57"),"\u7684\u6570\u7ec4\uff0c\u8981\u6c42\u7b97\u6cd5\u8f93\u51fa\u8fd9\u4e9b\u6570\u5b57\u7684\u6240\u6709\u5b50\u96c6\u3002"),(0,c.kt)("p",null,"\u89e3\u6cd5\u4e00\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<vector<int>> subsets(vector<int>& nums) {\n    // base case\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u96c6\n    if (nums.empty()) return {{}};\n    // \u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u62ff\u51fa\u6765\n    int n = nums.back();\n    nums.pop_back();\n    // \u5148\u9012\u5f52\u7b97\u51fa\u524d\u9762\u5143\u7d20\u7684\u6240\u6709\u5b50\u96c6\n    vector<vector<int>> res = subsets(nums);\n\n    int size = res.size();\n    for (int i = 0; i < size; i++) {\n        // \u7136\u540e\u5728\u4e4b\u524d\u7684\u7ed3\u679c\u4e4b\u4e0a\u8ffd\u52a0\n        res.push_back(res[i]);\n        res.back().push_back(n);\n    }\n    return res;\n}\n")),(0,c.kt)("p",null,"\u89e3\u6cd5\u4e8c\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u5b58\u50a8\u6240\u6709\u5b50\u96c6\nvector<vector<int>> res;\n\n/* \u4e3b\u51fd\u6570 */\nvector<vector<int>> subsets(vector<int>& nums) {\n    // \u8bb0\u5f55\u8d70\u8fc7\u7684\u8def\u5f84\n    vector<int> track;\n    backtrack(nums, 0, track);\n    return res;\n}\n\n/* \u5957\u56de\u6eaf\u7b97\u6cd5\u6a21\u677f */\nvoid backtrack(vector<int>& nums, int start, vector<int>& track) {\n    // \u524d\u5e8f\u904d\u5386\u7684\u4f4d\u7f6e\n    res.push_back(track);\n    // \u4ece start \u5f00\u59cb\uff0c\u9632\u6b62\u4ea7\u751f\u91cd\u590d\u7684\u5b50\u96c6\n    for (int i = start; i < nums.size(); i++) {\n        // \u505a\u9009\u62e9\n        track.push_back(nums[i]);\n        // \u9012\u5f52\u56de\u6eaf\n        backtrack(nums, i + 1, track);\n        // \u64a4\u9500\u9009\u62e9\n        track.pop_back();\n    }\n}\n")),(0,c.kt)("h3",{id:"412-\u7ec4\u5408"},"4.1.2 \u7ec4\u5408"),(0,c.kt)("p",null,"\u8f93\u5165\u4e24\u4e2a\u6570\u5b57 ",(0,c.kt)("inlineCode",{parentName:"p"},"n, k"),"\uff0c\u7b97\u6cd5\u8f93\u51fa ",(0,c.kt)("inlineCode",{parentName:"p"},"[1..n]")," \u4e2d ",(0,c.kt)("inlineCode",{parentName:"p"},"k")," \u4e2a\u6570\u5b57\u7684\u6240\u6709\u7ec4\u5408\u3002"),(0,c.kt)("p",null,"\u5957\u56de\u6eaf\u7b97\u6cd5\u6a21\u677f\u6846\u67b6\u5c31\u884c\u4e86\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u8bb0\u5f55\u6240\u6709\u7ec4\u5408\nvector<vector<int>>res;\n\n/* \u4e3b\u51fd\u6570 */\nvector<vector<int>> combine(int n, int k) {\n    if (k <= 0 || n <= 0) return res;\n    vector<int> track;\n    backtrack(n, k, 1, track);\n    return res;\n}\n\n// \u5957\u56de\u6eaf\u7b97\u6cd5\u6a21\u677f\nvoid backtrack(int n, int k, int start, vector<int>& track) {\n    // \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u624d\u66f4\u65b0 res\n    if (k == track.size()) {\n        res.push_back(track);\n        return;\n    }\n    // i \u4ece start \u5f00\u59cb\u9012\u589e\n    for (int i = start; i <= n; i++) {\n        // \u505a\u9009\u62e9\n        track.push_back(i);\n        // \u9012\u5f52\u56de\u6eaf\n        backtrack(n, k, i + 1, track);\n        // \u64a4\u9500\u9009\u62e9\n        track.pop_back();\n    }\n}\n")),(0,c.kt)("h3",{id:"413-\u6392\u5217"},"4.1.3 \u6392\u5217"),(0,c.kt)("p",null,"\u8f93\u5165\u4e00\u4e2a",(0,c.kt)("strong",{parentName:"p"},"\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57"),"\u7684\u6570\u7ec4 ",(0,c.kt)("inlineCode",{parentName:"p"},"nums"),"\uff0c\u8fd4\u56de\u8fd9\u4e9b\u6570\u5b57\u7684\u5168\u90e8\u6392\u5217\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-java"},"List<List<Integer>> res = new LinkedList<>();\n\n/* \u4e3b\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u7ec4\u4e0d\u91cd\u590d\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u5168\u6392\u5217 */\nList<List<Integer>> permute(int[] nums) {\n    // \u8bb0\u5f55\u300c\u8def\u5f84\u300d\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(nums, track);\n    return res;\n}\n\nvoid backtrack(int[] nums, LinkedList<Integer> track) {\n    // \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\n    if (track.size() == nums.length) {\n        res.add(new LinkedList(track));\n        return;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n        // \u6392\u9664\u4e0d\u5408\u6cd5\u7684\u9009\u62e9\n        if (track.contains(nums[i]))\n            continue;\n        // \u505a\u9009\u62e9\n        track.add(nums[i]);\n        // \u8fdb\u5165\u4e0b\u4e00\u5c42\u51b3\u7b56\u6811\n        backtrack(nums, track);\n        // \u53d6\u6d88\u9009\u62e9\n        track.removeLast();\n    }\n}\n")))}k.isMDXComponent=!0}}]);