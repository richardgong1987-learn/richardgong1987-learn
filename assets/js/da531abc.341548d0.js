"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[9230],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(r),g=o,f=c["".concat(s,".").concat(g)]||c[g]||p[g]||i;return r?t.createElement(f,a(a({ref:n},d),{},{components:r})):t.createElement(f,a({ref:n},d))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8068:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var t=r(83117),o=(r(67294),r(3905));const i={},a="3.5 \u7528\u5404\u79cd\u904d\u5386\u6846\u67b6\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",l={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",title:"3.5 \u7528\u5404\u79cd\u904d\u5386\u6846\u67b6\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3.3 \u4e8c\u53c9\u641c\u7d22\u6811\u64cd\u4f5c\u96c6\u9526",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u641c\u7d22\u6811\u64cd\u4f5c\u96c6\u9526"},next:{title:"3.7 \u7279\u6b8a\u6570\u636e\u7ed3\u6784\uff1a\u5355\u8c03\u6808",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5355\u8c03\u6808"}},s={},u=[{value:"3.5.1 \u9898\u76ee\u63cf\u8ff0",id:"351-\u9898\u76ee\u63cf\u8ff0",level:3},{value:"3.5.2 \u524d\u5e8f\u904d\u5386\u89e3\u6cd5",id:"352-\u524d\u5e8f\u904d\u5386\u89e3\u6cd5",level:3},{value:"3.5.3 \u540e\u5e8f\u904d\u5386\u89e3\u6cd5",id:"353-\u540e\u5e8f\u904d\u5386\u89e3\u6cd5",level:3},{value:"3.5.4 \u4e2d\u5e8f\u904d\u5386\u89e3\u6cd5",id:"354-\u4e2d\u5e8f\u904d\u5386\u89e3\u6cd5",level:3},{value:"3.5.5 \u5c42\u7ea7\u904d\u5386\u89e3\u6cd5",id:"355-\u5c42\u7ea7\u904d\u5386\u89e3\u6cd5",level:3}],d={toc:u};function c(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"35-\u7528\u5404\u79cd\u904d\u5386\u6846\u67b6\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},"3.5 \u7528\u5404\u79cd\u904d\u5386\u6846\u67b6\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"),(0,o.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree"},"297.\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316")),(0,o.kt)("h3",{id:"351-\u9898\u76ee\u63cf\u8ff0"},"3.5.1 \u9898\u76ee\u63cf\u8ff0"),(0,o.kt)("p",null,"\u300c\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u300d\u5c31\u662f\u7ed9\u4f60\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"\uff0c\u8981\u6c42\u4f60\u5b9e\u73b0\u5982\u4e0b\u4e00\u4e2a\u7c7b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class Codec {\n\n    // \u628a\u4e00\u68f5\u4e8c\u53c9\u6811\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32\n    public String serialize(TreeNode root) {}\n\n    // \u628a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u6210\u4e8c\u53c9\u6811\n    public TreeNode deserialize(String data) {}\n}\n")),(0,o.kt)("h3",{id:"352-\u524d\u5e8f\u904d\u5386\u89e3\u6cd5"},"3.5.2 \u524d\u5e8f\u904d\u5386\u89e3\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class Codec {\n\n    String SEP = ",";\n    String NULL = "#";\n\n    /* \u4e3b\u51fd\u6570\uff0c\u5c06\u4e8c\u53c9\u6811\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32 */\n    String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        serialize(root, sb);\n        return sb.toString();\n    }\n\n    /* \u8f85\u52a9\u51fd\u6570\uff0c\u5c06\u4e8c\u53c9\u6811\u5b58\u5165 StringBuilder */\n    void serialize(TreeNode root, StringBuilder sb) {\n        if (root == null) {\n            sb.append(NULL).append(SEP);\n            return;\n        }\n\n        /****** \u524d\u5e8f\u904d\u5386\u4f4d\u7f6e ******/\n        sb.append(root.val).append(SEP);\n        /***********************/\n\n        serialize(root.left, sb);\n        serialize(root.right, sb);\n    }\n\n    /* \u4e3b\u51fd\u6570\uff0c\u5c06\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e8c\u53c9\u6811\u7ed3\u6784 */\n    TreeNode deserialize(String data) {\n        // \u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u5217\u8868\n        LinkedList<String> nodes = new LinkedList<>();\n        for (String s : data.split(SEP)) {\n            nodes.addLast(s);\n        }\n        return deserialize(nodes);\n    }\n\n    /* \u8f85\u52a9\u51fd\u6570\uff0c\u901a\u8fc7 nodes \u5217\u8868\u6784\u9020\u4e8c\u53c9\u6811 */\n    TreeNode deserialize(LinkedList<String> nodes) {\n        if (nodes.isEmpty()) return null;\n\n        /****** \u524d\u5e8f\u904d\u5386\u4f4d\u7f6e ******/\n        // \u5217\u8868\u6700\u5de6\u4fa7\u5c31\u662f\u6839\u8282\u70b9\n        String first = nodes.removeFirst();\n        if (first.equals(NULL)) return null;\n        TreeNode root = new TreeNode(Integer.parseInt(first));\n        /***********************/\n\n        root.left = deserialize(nodes);\n        root.right = deserialize(nodes);\n\n        return root;\n    }\n}\n')),(0,o.kt)("h3",{id:"353-\u540e\u5e8f\u904d\u5386\u89e3\u6cd5"},"3.5.3 \u540e\u5e8f\u904d\u5386\u89e3\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class Codec {\n\n    String SEP = ",";\n    String NULL = "#";\n\n    /* \u8f85\u52a9\u51fd\u6570\uff0c\u5c06\u4e8c\u53c9\u6811\u5b58\u5165 StringBuilder */\n    void serialize(TreeNode root, StringBuilder sb) {\n        if (root == null) {\n            sb.append(NULL).append(SEP);\n            return;\n        }\n        \n        serialize(root.left, sb);\n        serialize(root.right, sb);\n\n        /****** \u540e\u5e8f\u904d\u5386\u4f4d\u7f6e ******/\n        sb.append(root.val).append(SEP);\n        /***********************/\n    }\n\n    /* \u4e3b\u51fd\u6570\uff0c\u5c06\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e8c\u53c9\u6811\u7ed3\u6784 */\n    TreeNode deserialize(String data) {\n        LinkedList<String> nodes = new LinkedList<>();\n        for (String s : data.split(SEP)) {\n            nodes.addLast(s);\n        }\n        return deserialize(nodes);\n    }\n\n    /* \u8f85\u52a9\u51fd\u6570\uff0c\u901a\u8fc7 nodes \u5217\u8868\u6784\u9020\u4e8c\u53c9\u6811 */\n    TreeNode deserialize(LinkedList<String> nodes) {\n        if (nodes.isEmpty()) return null;\n        // \u4ece\u540e\u5f80\u524d\u53d6\u51fa\u5143\u7d20\n        String last = nodes.removeLast();\n        if (last.equals(NULL)) return null;\n        TreeNode root = new TreeNode(Integer.parseInt(last));\n        // \u5148\u6784\u9020\u53f3\u5b50\u6811\uff0c\u540e\u6784\u9020\u5de6\u5b50\u6811\n        root.right = deserialize(nodes);\n        root.left = deserialize(nodes);\n        \n        return root;\n    }\n}\n')),(0,o.kt)("h3",{id:"354-\u4e2d\u5e8f\u904d\u5386\u89e3\u6cd5"},"3.5.4 \u4e2d\u5e8f\u904d\u5386\u89e3\u6cd5"),(0,o.kt)("p",null,"\u65e0\u6cd5\u5b9e\u73b0\u3002"),(0,o.kt)("h3",{id:"355-\u5c42\u7ea7\u904d\u5386\u89e3\u6cd5"},"3.5.5 \u5c42\u7ea7\u904d\u5386\u89e3\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class Codec {\n    String SEP = ",";\n    String NULL = "#";\n\n    /* \u5c06\u4e8c\u53c9\u6811\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32 */\n    String serialize(TreeNode root) {\n        if (root == null) return "";\n        StringBuilder sb = new StringBuilder();\n        // \u521d\u59cb\u5316\u961f\u5217\uff0c\u5c06 root \u52a0\u5165\u961f\u5217\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        \n        while (!q.isEmpty()) {\n            TreeNode cur = q.poll();\n            \n            /* \u5c42\u7ea7\u904d\u5386\u4ee3\u7801\u4f4d\u7f6e */\n            if (cur == null) {\n                sb.append(NULL).append(SEP);\n                continue;\n            }\n            sb.append(cur.val).append(SEP);\n            /*****************/\n\n            q.offer(cur.left);\n            q.offer(cur.right);\n        }\n        \n        return sb.toString();\n    }\n\n    /* \u5c06\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u4e8c\u53c9\u6811\u7ed3\u6784 */\n    TreeNode deserialize(String data) {\n        if (data.isEmpty()) return null;\n        String[] nodes = data.split(SEP);\n        // \u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u662f root \u7684\u503c\n        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));\n\n        // \u961f\u5217 q \u8bb0\u5f55\u7236\u8282\u70b9\uff0c\u5c06 root \u52a0\u5165\u961f\u5217\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n\n        for (int i = 1; i < nodes.length; ) {\n            // \u961f\u5217\u4e2d\u5b58\u7684\u90fd\u662f\u7236\u8282\u70b9\n            TreeNode parent = q.poll();\n            // \u7236\u8282\u70b9\u5bf9\u5e94\u7684\u5de6\u4fa7\u5b50\u8282\u70b9\u7684\u503c\n            String left = nodes[i++];\n            if (!left.equals(NULL)) {\n                parent.left = new TreeNode(Integer.parseInt(left));\n                q.offer(parent.left);\n            } else {\n                parent.left = null;\n            }\n            // \u7236\u8282\u70b9\u5bf9\u5e94\u7684\u53f3\u4fa7\u5b50\u8282\u70b9\u7684\u503c\n            String right = nodes[i++];\n            if (!right.equals(NULL)) {\n                parent.right = new TreeNode(Integer.parseInt(right));\n                q.offer(parent.right);\n            } else {\n                parent.right = null;\n            }\n        }\n        return root;\n    }\n}\n')))}c.isMDXComponent=!0}}]);