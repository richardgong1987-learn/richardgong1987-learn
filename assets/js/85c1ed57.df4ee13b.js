(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[5498],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),l=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=l(e.components);return t.createElement(u.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=a,m=p["".concat(u,".").concat(f)]||p[f]||y[f]||o;return r?t.createElement(m,i(i({ref:n},s),{},{components:r})):t.createElement(m,i({ref:n},s))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},81987:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var t=r(22122),a=r(19756),o=(r(67294),r(3905)),i=["components"],c={},u="3.2 \u5c42\u5c42\u62c6\u89e3\uff0c\u5e26\u4f60\u624b\u5199 LFU \u7b97\u6cd5",l={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU",isDocsHomePage:!1,title:"3.2 \u5c42\u5c42\u62c6\u89e3\uff0c\u5e26\u4f60\u624b\u5199 LFU \u7b97\u6cd5",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/LFU.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.12 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u9ad8\u697c\u6254\u9e21\u86cb",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u9ad8\u697c\u6254\u9e21\u86cb\u95ee\u9898"},next:{title:"3.3 \u4e8c\u53c9\u641c\u7d22\u6811\u64cd\u4f5c\u96c6\u9526",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u4e8c\u53c9\u641c\u7d22\u6811\u64cd\u4f5c\u96c6\u9526"}},s=[],y={toc:s};function p(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},y,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"32-\u5c42\u5c42\u62c6\u89e3\uff0c\u5e26\u4f60\u624b\u5199-lfu-\u7b97\u6cd5"},"3.2 \u5c42\u5c42\u62c6\u89e3\uff0c\u5e26\u4f60\u624b\u5199 LFU \u7b97\u6cd5"),(0,o.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/lfu-cache/"},"460.LFU\u7f13\u5b58\u673a\u5236")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class LFUCache {\n    // key \u5230 val \u7684\u6620\u5c04\uff0c\u6211\u4eec\u540e\u6587\u79f0\u4e3a KV \u8868\n    HashMap<Integer, Integer> keyToVal;\n    // key \u5230 freq \u7684\u6620\u5c04\uff0c\u6211\u4eec\u540e\u6587\u79f0\u4e3a KF \u8868\n    HashMap<Integer, Integer> keyToFreq;\n    // freq \u5230 key \u5217\u8868\u7684\u6620\u5c04\uff0c\u6211\u4eec\u540e\u6587\u79f0\u4e3a FK \u8868\n    HashMap<Integer, LinkedHashSet<Integer>> freqToKeys;\n    // \u8bb0\u5f55\u6700\u5c0f\u7684\u9891\u6b21\n    int minFreq;\n    // \u8bb0\u5f55 LFU \u7f13\u5b58\u7684\u6700\u5927\u5bb9\u91cf\n    int cap;\n\n    public LFUCache(int capacity) {\n        keyToVal = new HashMap<>();\n        keyToFreq = new HashMap<>();\n        freqToKeys = new HashMap<>();\n        this.cap = capacity;\n        this.minFreq = 0;\n    }\n\n\n    public int get(int key) {\n        if (!keyToVal.containsKey(key)) {\n            return -1;\n        }\n        // \u589e\u52a0 key \u5bf9\u5e94\u7684 freq\n        increaseFreq(key);\n        return keyToVal.get(key);\n    }\n\n    public void put(int key, int val) {\n        if (this.cap <= 0) return;\n\n        /* \u82e5 key \u5df2\u5b58\u5728\uff0c\u4fee\u6539\u5bf9\u5e94\u7684 val \u5373\u53ef */\n        if (keyToVal.containsKey(key)) {\n            keyToVal.put(key, val);\n            // key \u5bf9\u5e94\u7684 freq \u52a0\u4e00\n            increaseFreq(key);\n            return;\n        }\n\n        /* key \u4e0d\u5b58\u5728\uff0c\u9700\u8981\u63d2\u5165 */\n        /* \u5bb9\u91cf\u5df2\u6ee1\u7684\u8bdd\u9700\u8981\u6dd8\u6c70\u4e00\u4e2a freq \u6700\u5c0f\u7684 key */\n        if (this.cap <= keyToVal.size()) {\n            removeMinFreqKey();\n        }\n\n        /* \u63d2\u5165 key \u548c val\uff0c\u5bf9\u5e94\u7684 freq \u4e3a 1 */\n        // \u63d2\u5165 KV \u8868\n        keyToVal.put(key, val);\n        // \u63d2\u5165 KF \u8868\n        keyToFreq.put(key, 1);\n        // \u63d2\u5165 FK \u8868\n        freqToKeys.putIfAbsent(1, new LinkedHashSet<>());\n        freqToKeys.get(1).add(key);\n        // \u63d2\u5165\u65b0 key \u540e\u6700\u5c0f\u7684 freq \u80af\u5b9a\u662f 1\n        this.minFreq = 1;\n    }\n\n    private void removeMinFreqKey() {\n        // freq \u6700\u5c0f\u7684 key \u5217\u8868\n        LinkedHashSet<Integer> keyList = freqToKeys.get(this.minFreq);\n        // \u5176\u4e2d\u6700\u5148\u88ab\u63d2\u5165\u7684\u90a3\u4e2a key \u5c31\u662f\u8be5\u88ab\u6dd8\u6c70\u7684 key\n        int deletedKey = keyList.iterator().next();\n        /* \u66f4\u65b0 FK \u8868 */\n        keyList.remove(deletedKey);\n        if (keyList.isEmpty()) {\n            freqToKeys.remove(this.minFreq);\n            // \u8fd9\u91cc\u9700\u8981\u66f4\u65b0 minFreq \u5417\uff1f\n        }\n        /* \u66f4\u65b0 KV \u8868 */\n        keyToVal.remove(deletedKey);\n        /* \u66f4\u65b0 KF \u8868 */\n        keyToFreq.remove(deletedKey);\n    }\n\n    private void increaseFreq(int key) {\n        int freq = keyToFreq.get(key);\n        /* \u66f4\u65b0 KF \u8868 */\n        keyToFreq.put(key, freq + 1);\n        /* \u66f4\u65b0 FK \u8868 */\n        // \u5c06 key \u4ece freq \u5bf9\u5e94\u7684\u5217\u8868\u4e2d\u5220\u9664\n        freqToKeys.get(freq).remove(key);\n        // \u5c06 key \u52a0\u5165 freq + 1 \u5bf9\u5e94\u7684\u5217\u8868\u4e2d\n        freqToKeys.putIfAbsent(freq + 1, new LinkedHashSet<>());\n        freqToKeys.get(freq + 1).add(key);\n        // \u5982\u679c freq \u5bf9\u5e94\u7684\u5217\u8868\u7a7a\u4e86\uff0c\u79fb\u9664\u8fd9\u4e2a freq\n        if (freqToKeys.get(freq).isEmpty()) {\n            freqToKeys.remove(freq);\n            // \u5982\u679c\u8fd9\u4e2a freq \u6070\u597d\u662f minFreq\uff0c\u66f4\u65b0 minFreq\n            if (freq == this.minFreq) {\n                this.minFreq++;\n            }\n        }\n    }\n")))}p.isMDXComponent=!0}}]);