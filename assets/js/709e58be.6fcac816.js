"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[298],{3905:function(n,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var e=r(67294);function o(n,t,r){return t in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n}function a(n,t){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.push.apply(r,e)}return r}function i(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(r,t))}))}return n}function c(n,t){if(null==n)return{};var r,e,o=function(n,t){if(null==n)return{};var r,e,o={},a=Object.keys(n);for(e=0;e<a.length;e++)r=a[e],t.indexOf(r)>=0||(o[r]=n[r]);return o}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(e=0;e<a.length;e++)r=a[e],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(o[r]=n[r])}return o}var u=e.createContext({}),l=function(n){var t=e.useContext(u),r=t;return n&&(r="function"==typeof n?n(t):i(i({},t),n)),r},s=function(n){var t=l(n.components);return e.createElement(u.Provider,{value:t},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var t=n.children;return e.createElement(e.Fragment,{},t)}},g=e.forwardRef((function(n,t){var r=n.components,o=n.mdxType,a=n.originalType,u=n.parentName,s=c(n,["components","mdxType","originalType","parentName"]),p=l(r),g=o,f=p["".concat(u,".").concat(g)]||p[g]||d[g]||a;return r?e.createElement(f,i(i({ref:t},s),{},{components:r})):e.createElement(f,i({ref:t},s))}));function f(n,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var a=r.length,i=new Array(a);i[0]=g;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=n,c[p]="string"==typeof n?n:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return e.createElement.apply(null,i)}return e.createElement.apply(null,r)}g.displayName="MDXCreateElement"},20333:function(n,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var e=r(83117),o=(r(67294),r(3905));const a={},i="4.4 BFS \u7b97\u6cd5\u66b4\u529b\u7834\u89e3\u5404\u79cd\u667a\u529b\u9898",c={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe",title:"4.4 BFS \u7b97\u6cd5\u66b4\u529b\u7834\u89e3\u5404\u79cd\u667a\u529b\u9898",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1.4 BFS \u7b97\u6cd5\u5957\u8def\u6846\u67b6",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6"},next:{title:"5.12 Union-Find\u7b97\u6cd5\u5e94\u7528",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/UnionFind\u7b97\u6cd5\u5e94\u7528"}},u={},l=[],s={toc:l};function p(n){let{components:t,...r}=n;return(0,o.kt)("wrapper",(0,e.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"44-bfs-\u7b97\u6cd5\u66b4\u529b\u7834\u89e3\u5404\u79cd\u667a\u529b\u9898"},"4.4 BFS \u7b97\u6cd5\u66b4\u529b\u7834\u89e3\u5404\u79cd\u667a\u529b\u9898"),(0,o.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/sliding-puzzle"},"773.\u6ed1\u52a8\u8c1c\u9898")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int slidingPuzzle(vector<vector<int>>& board) {\n    int m = 2, n = 3;\n    string start = \"\";\n    string target = \"123450\";\n    // \u5c06 2x3 \u7684\u6570\u7ec4\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            start.push_back(board[i][j] + '0');\n        }\n    }\n    // \u8bb0\u5f55\u4e00\u7ef4\u5b57\u7b26\u4e32\u7684\u76f8\u90bb\u7d22\u5f15\n    vector<vector<int>> neighbor = {\n        { 1, 3 },\n        { 0, 4, 2 },\n        { 1, 5 },\n        { 0, 4 },\n        { 3, 1, 5 },\n        { 4, 2 }\n    };\n    \n    /******* BFS \u7b97\u6cd5\u6846\u67b6\u5f00\u59cb *******/\n    queue<string> q;\n    unordered_set<string> visited;\n    q.push(start);\n    visited.insert(start);\n    \n    int step = 0;\n    while (!q.empty()) {\n        int sz = q.size();\n        for (int i = 0; i < sz; i++) {\n            string cur = q.front(); q.pop();\n            // \u5224\u65ad\u662f\u5426\u8fbe\u5230\u76ee\u6807\u5c40\u9762\n            if (target == cur) {\n                return step;\n            }\n            // \u627e\u5230\u6570\u5b57 0 \u7684\u7d22\u5f15\n            int idx = 0;\n            for (; cur[idx] != '0'; idx++);\n            // \u5c06\u6570\u5b57 0 \u548c\u76f8\u90bb\u7684\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\n            for (int adj : neighbor[idx]) {\n                string new_board = cur;\n                swap(new_board[adj], new_board[idx]);\n                // \u9632\u6b62\u8d70\u56de\u5934\u8def\n                if (!visited.count(new_board)) {\n                    q.push(new_board);\n                    visited.insert(new_board);\n                }\n            }\n        }\n        step++;\n    }\n    return -1;\n    /******* BFS \u7b97\u6cd5\u6846\u67b6\u7ed3\u675f *******/\n}\n")))}p.isMDXComponent=!0}}]);