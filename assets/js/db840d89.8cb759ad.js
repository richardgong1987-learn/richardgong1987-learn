"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[4239],{3905:function(t,n,e){e.d(n,{Zo:function(){return c},kt:function(){return f}});var r=e(67294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function u(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},l=Object.keys(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var m=r.createContext({}),o=function(t){var n=r.useContext(m),e=n;return t&&(e="function"==typeof t?t(n):a(a({},n),t)),e},c=function(t){var n=o(t.components);return r.createElement(m.Provider,{value:n},t.children)},s={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,l=t.originalType,m=t.parentName,c=u(t,["components","mdxType","originalType","parentName"]),g=o(e),f=i,d=g["".concat(m,".").concat(f)]||g[f]||s[f]||l;return e?r.createElement(d,a(a({ref:n},c),{},{components:e})):r.createElement(d,a({ref:n},c))}));function f(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var l=e.length,a=new Array(l);a[0]=g;var u={};for(var m in n)hasOwnProperty.call(n,m)&&(u[m]=n[m]);u.originalType=t,u.mdxType="string"==typeof t?t:i,a[1]=u;for(var o=2;o<l;o++)a[o]=e[o];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}g.displayName="MDXCreateElement"},5878:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return o},toc:function(){return c},default:function(){return g}});var r=e(83117),i=e(80102),l=(e(67294),e(3905)),a=["components"],u={},m="1.6 \u6211\u5199\u4e86\u9996\u8bd7\uff0c\u4fdd\u4f60\u95ed\u7740\u773c\u775b\u5199\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5",o={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3",title:"1.6 \u6211\u5199\u4e86\u9996\u8bd7\uff0c\u4fdd\u4f60\u95ed\u7740\u773c\u775b\u5199\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4e8c\u5206\u67e5\u627e\u8be6\u89e3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4.5 2Sum\u95ee\u9898\u7684\u6838\u5fc3\u601d\u60f3",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/twoSum\u95ee\u9898\u7684\u6838\u5fc3\u601d\u60f3"},next:{title:"2.2 \u4e8c\u7ef4\u9012\u589e\u5b50\u5e8f\u5217\uff1a\u4fe1\u5c01\u5d4c\u5957\u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u4fe1\u5c01\u5d4c\u5957\u95ee\u9898"}},c=[{value:"1.6.1 \u4e8c\u5206\u67e5\u627e\u6846\u67b6",id:"161-\u4e8c\u5206\u67e5\u627e\u6846\u67b6",children:[],level:3},{value:"1.6.2 \u5bfb\u627e\u4e00\u4e2a\u6570\uff08\u57fa\u672c\u7684\u4e8c\u5206\u641c\u7d22\uff09",id:"162-\u5bfb\u627e\u4e00\u4e2a\u6570\u57fa\u672c\u7684\u4e8c\u5206\u641c\u7d22",children:[],level:3},{value:"1.6.3 \u5bfb\u627e\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22",id:"163-\u5bfb\u627e\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22",children:[],level:3},{value:"1.6.4 \u5bfb\u627e\u53f3\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u67e5\u627e",id:"164-\u5bfb\u627e\u53f3\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u67e5\u627e",children:[],level:3}],s={toc:c};function g(t){var n=t.components,e=(0,i.Z)(t,a);return(0,l.kt)("wrapper",(0,r.Z)({},s,e,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"16-\u6211\u5199\u4e86\u9996\u8bd7\u4fdd\u4f60\u95ed\u7740\u773c\u775b\u5199\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5"},"1.6 \u6211\u5199\u4e86\u9996\u8bd7\uff0c\u4fdd\u4f60\u95ed\u7740\u773c\u775b\u5199\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5"),(0,l.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-search"},"704.\u4e8c\u5206\u67e5\u627e")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},"34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e")),(0,l.kt)("h3",{id:"161-\u4e8c\u5206\u67e5\u627e\u6846\u67b6"},"1.6.1 \u4e8c\u5206\u67e5\u627e\u6846\u67b6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int binarySearch(int[] nums, int target) {\n    int left = 0, right = ...;\n    while(...) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            ...\n        } else if (nums[mid] < target) {\n            left = ...\n        } else if (nums[mid] > target) {\n            right = ...\n        }\n    }\n    return ...;\n}\n")),(0,l.kt)("h3",{id:"162-\u5bfb\u627e\u4e00\u4e2a\u6570\u57fa\u672c\u7684\u4e8c\u5206\u641c\u7d22"},"1.6.2 \u5bfb\u627e\u4e00\u4e2a\u6570\uff08\u57fa\u672c\u7684\u4e8c\u5206\u641c\u7d22\uff09"),(0,l.kt)("p",null,"\u8fd9\u4e2a\u573a\u666f\u662f\u6700\u7b80\u5355\u7684\uff0c\u53ef\u80fd\u4e5f\u662f\u5927\u5bb6\u6700\u719f\u6089\u7684\uff0c\u5373\u641c\u7d22\u4e00\u4e2a\u6570\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u5176\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int binarySearch(int[] nums, int target) {\n    int left = 0; \n    int right = nums.length - 1; // \u6ce8\u610f\n\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target)\n            return mid; \n        else if (nums[mid] < target)\n            left = mid + 1; // \u6ce8\u610f\n        else if (nums[mid] > target)\n            right = mid - 1; // \u6ce8\u610f\n    }\n    return -1;\n}\n")),(0,l.kt)("h3",{id:"163-\u5bfb\u627e\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22"},"1.6.3 \u5bfb\u627e\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22"),(0,l.kt)("p",null,"\u4ee5\u4e0b\u662f\u6700\u5e38\u89c1\u7684\u4ee3\u7801\u5f62\u5f0f\uff0c\u5176\u4e2d\u7684\u6807\u8bb0\u662f\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int left_bound(int[] nums, int target) {\n    if (nums.length == 0) return -1;\n    int left = 0;\n    int right = nums.length; // \u6ce8\u610f\n    \n    while (left < right) { // \u6ce8\u610f\n        int mid = (left + right) / 2;\n        if (nums[mid] == target) {\n            right = mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            right = mid; // \u6ce8\u610f\n        }\n    }\n    return left;\n}\n")),(0,l.kt)("h3",{id:"164-\u5bfb\u627e\u53f3\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u67e5\u627e"},"1.6.4 \u5bfb\u627e\u53f3\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u67e5\u627e"),(0,l.kt)("p",null,"\u6bd4\u8f83\u5e38\u89c1\u7684\u5de6\u95ed\u53f3\u5f00\u7684\u5199\u6cd5\uff0c\u53ea\u6709\u4e24\u5904\u548c\u641c\u7d22\u5de6\u4fa7\u8fb9\u754c\u4e0d\u540c\uff0c\u5df2\u6807\u6ce8\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int right_bound(int[] nums, int target) {\n    if (nums.length == 0) return -1;\n    int left = 0, right = nums.length;\n    \n    while (left < right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] == target) {\n            left = mid + 1; // \u6ce8\u610f\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            right = mid;\n        }\n    }\n    return left - 1; // \u6ce8\u610f\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6211\u4eec\u8fd8\u6839\u636e\u903b\u8f91\u5c06\u300c\u641c\u7d22\u533a\u95f4\u300d\u5168\u90fd\u7edf\u4e00\u6210\u4e86\u4e24\u7aef\u90fd\u95ed\uff0c\u4fbf\u4e8e\u8bb0\u5fc6\uff0c\u53ea\u8981\u4fee\u6539\u4e24\u5904\u5373\u53ef\u53d8\u5316\u51fa\u4e09\u79cd\u5199\u6cd5"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int binary_search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1; \n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            right = mid - 1; \n        } else if(nums[mid] == target) {\n            // \u76f4\u63a5\u8fd4\u56de\n            return mid;\n        }\n    }\n    // \u76f4\u63a5\u8fd4\u56de\n    return -1;\n}\n\nint left_bound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u522b\u8fd4\u56de\uff0c\u6536\u7d27\u53f3\u8fb9\u754c\uff0c\u9501\u5b9a\u5de6\u4fa7\u8fb9\u754c\n            right = mid - 1;\n        }\n    }\n    // \u6700\u540e\u8981\u68c0\u67e5 left \u8d8a\u754c\u7684\u60c5\u51b5\n    if (left >= nums.length || nums[left] != target)\n        return -1;\n    return left;\n}\n\n\nint right_bound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u522b\u8fd4\u56de\uff0c\u6536\u7d27\u5de6\u8fb9\u754c\uff0c\u9501\u5b9a\u53f3\u4fa7\u8fb9\u754c\n            left = mid + 1;\n        }\n    }\n    // \u6700\u540e\u8981\u68c0\u67e5 right \u8d8a\u754c\u7684\u60c5\u51b5\n    if (right < 0 || nums[right] != target)\n        return -1;\n    return right;\n}\n")))}g.isMDXComponent=!0}}]);