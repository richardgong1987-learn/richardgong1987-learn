"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[9965],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return f}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,c=n.parentName,s=u(n,["components","mdxType","originalType","parentName"]),p=l(t),f=i,g=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(g,o(o({ref:e},s),{},{components:t})):r.createElement(g,o({ref:e},s))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=p;var u={};for(var c in e)hasOwnProperty.call(e,c)&&(u[c]=e[c]);u.originalType=n,u.mdxType="string"==typeof n?n:i,o[1]=u;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},24616:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=t(83117),i=t(80102),a=(t(67294),t(3905)),o=["components"],u={},c="1.4 BFS \u7b97\u6cd5\u5957\u8def\u6846\u67b6",l={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6",isDocsHomePage:!1,title:"1.4 BFS \u7b97\u6cd5\u5957\u8def\u6846\u67b6",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u6846\u67b6.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3.10 \u79c0\u64cd\u4f5c\u4e4b\u7eaf\u9012\u5f52\u53cd\u8f6c\u94fe\u8868",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u9012\u5f52\u53cd\u8f6c\u94fe\u8868\u7684\u4e00\u90e8\u5206"},next:{title:"4.4 BFS \u7b97\u6cd5\u66b4\u529b\u7834\u89e3\u5404\u79cd\u667a\u529b\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/BFS\u89e3\u51b3\u6ed1\u52a8\u62fc\u56fe"}},s=[{value:"1.4.1 \u7b97\u6cd5\u6846\u67b6",id:"141-\u7b97\u6cd5\u6846\u67b6",children:[],level:3},{value:"1.4.2 \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6",id:"142-\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6",children:[],level:3},{value:"1.4.3 \u89e3\u5f00\u5bc6\u7801\u9501\u7684\u6700\u5c11\u6b21\u6570",id:"143-\u89e3\u5f00\u5bc6\u7801\u9501\u7684\u6700\u5c11\u6b21\u6570",children:[],level:3}],d={toc:s};function p(n){var e=n.components,t=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"14-bfs-\u7b97\u6cd5\u5957\u8def\u6846\u67b6"},"1.4 BFS \u7b97\u6cd5\u5957\u8def\u6846\u67b6"),(0,a.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree"},"111.\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/open-the-lock"},"752.\u6253\u5f00\u8f6c\u76d8\u9501")),(0,a.kt)("h3",{id:"141-\u7b97\u6cd5\u6846\u67b6"},"1.4.1 \u7b97\u6cd5\u6846\u67b6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8ba1\u7b97\u4ece\u8d77\u70b9 start \u5230\u7ec8\u70b9 target \u7684\u6700\u8fd1\u8ddd\u79bb\nint BFS(Node start, Node target) {\n    Queue<Node> q; // \u6838\u5fc3\u6570\u636e\u7ed3\u6784\n    Set<Node> visited; // \u907f\u514d\u8d70\u56de\u5934\u8def\n    \n    q.offer(start); // \u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217\n    visited.add(start);\n    int step = 0; // \u8bb0\u5f55\u6269\u6563\u7684\u6b65\u6570\n\n    while (q not empty) {\n        int sz = q.size();\n        /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u56db\u5468\u6269\u6563 */\n        for (int i = 0; i < sz; i++) {\n            Node cur = q.poll();\n            /* \u5212\u91cd\u70b9\uff1a\u8fd9\u91cc\u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */\n            if (cur is target)\n                return step;\n            /* \u5c06 cur \u7684\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */\n            for (Node x : cur.adj())\n                if (x not in visited) {\n                    q.offer(x);\n                    visited.add(x);\n                }\n        }\n        /* \u5212\u91cd\u70b9\uff1a\u66f4\u65b0\u6b65\u6570\u5728\u8fd9\u91cc */\n        step++;\n    }\n}\n")),(0,a.kt)("h3",{id:"142-\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6"},"1.4.2 \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int minDepth(TreeNode root) {\n    if (root == null) return 0;\n    Queue<TreeNode> q = new LinkedList<>();\n    q.offer(root);\n    // root \u672c\u8eab\u5c31\u662f\u4e00\u5c42\uff0cdepth \u521d\u59cb\u5316\u4e3a 1\n    int depth = 1;\n    \n    while (!q.isEmpty()) {\n        int sz = q.size();\n        /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u56db\u5468\u6269\u6563 */\n        for (int i = 0; i < sz; i++) {\n            TreeNode cur = q.poll();\n            /* \u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */\n            if (cur.left == null && cur.right == null) \n                return depth;\n            /* \u5c06 cur \u7684\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */\n            if (cur.left != null)\n                q.offer(cur.left);\n            if (cur.right != null) \n                q.offer(cur.right);\n        }\n        /* \u8fd9\u91cc\u589e\u52a0\u6b65\u6570 */\n        depth++;\n    }\n    return depth;\n}\n")),(0,a.kt)("h3",{id:"143-\u89e3\u5f00\u5bc6\u7801\u9501\u7684\u6700\u5c11\u6b21\u6570"},"1.4.3 \u89e3\u5f00\u5bc6\u7801\u9501\u7684\u6700\u5c11\u6b21\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'int openLock(String[] deadends, String target) {\n    // \u8bb0\u5f55\u9700\u8981\u8df3\u8fc7\u7684\u6b7b\u4ea1\u5bc6\u7801\n    Set<String> deads = new HashSet<>();\n    for (String s : deadends) deads.add(s);\n    // \u8bb0\u5f55\u5df2\u7ecf\u7a77\u4e3e\u8fc7\u7684\u5bc6\u7801\uff0c\u9632\u6b62\u8d70\u56de\u5934\u8def\n    Set<String> visited = new HashSet<>();\n    Queue<String> q = new LinkedList<>();\n    // \u4ece\u8d77\u70b9\u5f00\u59cb\u542f\u52a8\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n    int step = 0;\n    q.offer("0000");\n    visited.add("0000");\n    \n    while (!q.isEmpty()) {\n        int sz = q.size();\n        /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u5468\u56f4\u6269\u6563 */\n        for (int i = 0; i < sz; i++) {\n            String cur = q.poll();\n            \n            /* \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5408\u6cd5\uff0c\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */\n            if (deads.contains(cur))\n                continue;\n            if (cur.equals(target))\n                return step;\n            \n            /* \u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u672a\u904d\u5386\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */\n            for (int j = 0; j < 4; j++) {\n                String up = plusOne(cur, j);\n                if (!visited.contains(up)) {\n                    q.offer(up);\n                    visited.add(up);\n                }\n                String down = minusOne(cur, j);\n                if (!visited.contains(down)) {\n                    q.offer(down);\n                    visited.add(down);\n                }\n            }\n        }\n        /* \u5728\u8fd9\u91cc\u589e\u52a0\u6b65\u6570 */\n        step++;\n    }\n    // \u5982\u679c\u7a77\u4e3e\u5b8c\u90fd\u6ca1\u627e\u5230\u76ee\u6807\u5bc6\u7801\uff0c\u90a3\u5c31\u662f\u627e\u4e0d\u5230\u4e86\n    return -1;\n}\n')),(0,a.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528\u53cc\u5411 BFS \u7b97\u6cd5\u6765\u63d0\u9ad8\u6548\u7387\uff0c\u4ee3\u7801\u7a0d\u52a0\u4fee\u6539\u5373\u53ef\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'int openLock(String[] deadends, String target) {\n    Set<String> deads = new HashSet<>();\n    for (String s : deadends) deads.add(s);\n    // \u7528\u96c6\u5408\u4e0d\u7528\u961f\u5217\uff0c\u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\n    Set<String> q1 = new HashSet<>();\n    Set<String> q2 = new HashSet<>();\n    Set<String> visited = new HashSet<>();\n    // \u521d\u59cb\u5316\u8d77\u70b9\u548c\u7ec8\u70b9\n    q1.add("0000");\n    q2.add(target);\n    int step = 0;\n    \n    while (!q1.isEmpty() && !q2.isEmpty()) {\n        // \u54c8\u5e0c\u96c6\u5408\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u4fee\u6539\uff0c\n        // \u7528 temp \u5b58\u50a8 q1 \u7684\u6269\u6563\u7ed3\u679c\n        Set<String> temp = new HashSet<>();\n\n        /* \u5c06 q1 \u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u5468\u56f4\u6269\u6563 */\n        for (String cur : q1) {\n            /* \u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */\n            if (deads.contains(cur))\n                continue;\n            if (q2.contains(cur))\n                return step;\n            visited.add(cur);\n\n            /* \u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u672a\u904d\u5386\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u96c6\u5408 */\n            for (int j = 0; j < 4; j++) {\n                String up = plusOne(cur, j);\n                if (!visited.contains(up))\n                    temp.add(up);\n                String down = minusOne(cur, j);\n                if (!visited.contains(down))\n                    temp.add(down);\n            }\n        }\n        /* \u5728\u8fd9\u91cc\u589e\u52a0\u6b65\u6570 */\n        step++;\n        // temp \u76f8\u5f53\u4e8e q1\n        // \u8fd9\u91cc\u4ea4\u6362 q1 q2\uff0c\u4e0b\u4e00\u8f6e while \u5c31\u662f\u6269\u6563 q2\n        q1 = q2;\n        q2 = temp;\n    }\n    return -1;\n}\n')))}p.isMDXComponent=!0}}]);