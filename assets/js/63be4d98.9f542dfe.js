"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[5574],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return d}});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},s=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return n?t.createElement(g,c(c({ref:r},s),{},{components:n})):t.createElement(g,c({ref:r},s))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96010:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var t=n(83117),a=n(80102),o=(n(67294),n(3905)),c=["components"],i={},u="4.8 \u644a\u70e7\u997c\u4e5f\u5f97\u6709\u70b9\u9012\u5f52\u601d\u7ef4",l={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f",isDocsHomePage:!1,title:"4.8 \u644a\u70e7\u997c\u4e5f\u5f97\u6709\u70b9\u9012\u5f52\u601d\u7ef4",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1.7 \u6211\u5199\u4e86\u4e00\u4e2a\u6a21\u677f\uff0c\u628a\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636"},next:{title:"3.1 \u624b\u628a\u624b\u6559\u4f60\u5199 LRU \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u9ad8\u9891\u9762\u8bd5\u7cfb\u5217/LRU\u7b97\u6cd5"}},s=[],p={toc:s};function m(e){var r=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"48-\u644a\u70e7\u997c\u4e5f\u5f97\u6709\u70b9\u9012\u5f52\u601d\u7ef4"},"4.8 \u644a\u70e7\u997c\u4e5f\u5f97\u6709\u70b9\u9012\u5f52\u601d\u7ef4"),(0,o.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/pancake-sorting"},"969.\u714e\u997c\u6392\u5e8f")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// \u8bb0\u5f55\u53cd\u8f6c\u64cd\u4f5c\u5e8f\u5217\nLinkedList<Integer> res = new LinkedList<>();\n\nList<Integer> pancakeSort(int[] cakes) {\n    sort(cakes, cakes.length);\n    return res;\n}\n\n// \u5c06\u524d n \u5757\u997c\u6392\u5e8f\nvoid sort(int[] cakes, int n) {\n    // base case\n    if (n == 1) return;\n    \n    // \u5bfb\u627e\u6700\u5927\u997c\u7684\u7d22\u5f15\n    int maxCake = 0;\n    int maxCakeIndex = 0;\n    for (int i = 0; i < n; i++)\n        if (cakes[i] > maxCake) {\n            maxCakeIndex = i;\n            maxCake = cakes[i];\n        }\n    \n    // \u7b2c\u4e00\u6b21\u7ffb\u8f6c\uff0c\u5c06\u6700\u5927\u997c\u7ffb\u5230\u6700\u4e0a\u9762\n    reverse(cakes, 0, maxCakeIndex);\n    // \u8bb0\u5f55\u8fd9\u4e00\u6b21\u7ffb\u8f6c\n    res.add(maxCakeIndex + 1);\n    // \u7b2c\u4e8c\u6b21\u7ffb\u8f6c\uff0c\u5c06\u6700\u5927\u997c\u7ffb\u5230\u6700\u4e0b\u9762\n    reverse(cakes, 0, n - 1);\n    // \u8bb0\u5f55\u8fd9\u4e00\u6b21\u7ffb\u8f6c\n    res.add(n);\n\n    // \u9012\u5f52\u8c03\u7528\uff0c\u7ffb\u8f6c\u5269\u4e0b\u7684\u997c\n    sort(cakes, n - 1);\n}\n\n/* \u7ffb\u8f6c arr[i..j] \u7684\u5143\u7d20 */\nvoid reverse(int[] arr, int i, int j) {\n    while (i < j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++; j--;\n    }\n}\n")))}m.isMDXComponent=!0}}]);