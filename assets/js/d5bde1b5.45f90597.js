"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[940],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return f}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),d=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},s=function(n){var e=d(n.components);return r.createElement(l.Provider,{value:e},n.children)},u="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,l=n.parentName,s=o(n,["components","mdxType","originalType","parentName"]),u=d(t),g=i,f=u["".concat(l,".").concat(g)]||u[g]||p[g]||a;return t?r.createElement(f,c(c({ref:e},s),{},{components:t})):r.createElement(f,c({ref:e},s))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,c=new Array(a);c[0]=g;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o[u]="string"==typeof n?n:i,c[1]=o;for(var d=2;d<a;d++)c[d]=t[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},67519:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return d}});var r=t(83117),i=(t(67294),t(3905));const a={},c="1.7 \u6211\u5199\u4e86\u4e00\u4e2a\u6a21\u677f\uff0c\u628a\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898",o={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636",title:"1.7 \u6211\u5199\u4e86\u4e00\u4e2a\u6a21\u677f\uff0c\u628a\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u6ed1\u52a8\u7a97\u53e3\u6280\u5de7\u8fdb\u9636.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1.3 \u56de\u6eaf\u7b97\u6cd5\u89e3\u9898\u5957\u8def\u6846\u67b6",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u56de\u6eaf\u7b97\u6cd5\u8be6\u89e3\u4fee\u8ba2\u7248"},next:{title:"4.8 \u644a\u70e7\u997c\u4e5f\u5f97\u6709\u70b9\u9012\u5f52\u601d\u7ef4",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/\u70e7\u997c\u6392\u5e8f"}},l={},d=[{value:"1.7.1 \u6700\u5c0f\u8986\u76d6\u5b50\u4e32",id:"171-\u6700\u5c0f\u8986\u76d6\u5b50\u4e32",level:3},{value:"1.7.2 \u5b57\u7b26\u4e32\u6392\u5217",id:"172-\u5b57\u7b26\u4e32\u6392\u5217",level:3},{value:"1.7.3 \u627e\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd",id:"173-\u627e\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd",level:3},{value:"1.7.4 \u6700\u957f\u65e0\u91cd\u590d\u5b50\u4e32",id:"174-\u6700\u957f\u65e0\u91cd\u590d\u5b50\u4e32",level:3}],s={toc:d};function u(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"17-\u6211\u5199\u4e86\u4e00\u4e2a\u6a21\u677f\u628a\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898"},"1.7 \u6211\u5199\u4e86\u4e00\u4e2a\u6a21\u677f\uff0c\u628a\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898"),(0,i.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/minimum-window-substring"},"76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/permutation-in-string"},"567.\u5b57\u7b26\u4e32\u7684\u6392\u5217")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string"},"438.\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters"},"3.\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6240\u4ee5\u4eca\u5929\u6211\u5c31\u5199\u4e00\u5957\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u7684\u4ee3\u7801\u6846\u67b6\uff0c\u6211\u8fde\u5728\u54ea\u91cc\u505a\u8f93\u51fa debug \u90fd\u7ed9\u4f60\u5199\u597d\u4e86\uff0c\u4ee5\u540e\u9047\u5230\u76f8\u5173\u7684\u95ee\u9898\uff0c\u4f60\u5c31\u9ed8\u5199\u51fa\u6765\u5982\u4e0b\u6846\u67b6\u7136\u540e\u6539\u4e24\u4e2a\u5730\u65b9\u5c31\u884c\uff0c\u8fd8\u4e0d\u4f1a\u51fa bug"),"\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'/* \u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u6846\u67b6 */\nvoid slidingWindow(string s, string t) {\n    unordered_map<char, int> need, window;\n    for (char c : t) need[c]++;\n    \n    int left = 0, right = 0;\n    int valid = 0; \n    while (right < s.size()) {\n        // c \u662f\u5c06\u79fb\u5165\u7a97\u53e3\u7684\u5b57\u7b26\n        char c = s[right];\n        // \u53f3\u79fb\u7a97\u53e3\n        right++;\n        // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n        ...\n\n        /*** debug \u8f93\u51fa\u7684\u4f4d\u7f6e ***/\n        printf("window: [%d, %d)\\n", left, right);\n        /********************/\n        \n        // \u5224\u65ad\u5de6\u4fa7\u7a97\u53e3\u662f\u5426\u8981\u6536\u7f29\n        while (window needs shrink) {\n            // d \u662f\u5c06\u79fb\u51fa\u7a97\u53e3\u7684\u5b57\u7b26\n            char d = s[left];\n            // \u5de6\u79fb\u7a97\u53e3\n            left++;\n            // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n            ...\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"171-\u6700\u5c0f\u8986\u76d6\u5b50\u4e32"},"1.7.1 \u6700\u5c0f\u8986\u76d6\u5b50\u4e32"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'string minWindow(string s, string t) {\n    unordered_map<char, int> need, window;\n    for (char c : t) need[c]++;\n\n    int left = 0, right = 0;\n    int valid = 0;\n    // \u8bb0\u5f55\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u53ca\u957f\u5ea6\n    int start = 0, len = INT_MAX;\n    while (right < s.size()) {\n        // c \u662f\u5c06\u79fb\u5165\u7a97\u53e3\u7684\u5b57\u7b26\n        char c = s[right];\n        // \u53f3\u79fb\u7a97\u53e3\n        right++;\n        // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n        if (need.count(c)) {\n            window[c]++;\n            if (window[c] == need[c])\n                valid++;\n        }\n\n        // \u5224\u65ad\u5de6\u4fa7\u7a97\u53e3\u662f\u5426\u8981\u6536\u7f29\n        while (valid == need.size()) {\n            // \u5728\u8fd9\u91cc\u66f4\u65b0\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\n            if (right - left < len) {\n                start = left;\n                len = right - left;\n            }\n            // d \u662f\u5c06\u79fb\u51fa\u7a97\u53e3\u7684\u5b57\u7b26\n            char d = s[left];\n            // \u5de6\u79fb\u7a97\u53e3\n            left++;\n            // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n            if (need.count(d)) {\n                if (window[d] == need[d])\n                    valid--;\n                window[d]--;\n            }                    \n        }\n    }\n    // \u8fd4\u56de\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\n    return len == INT_MAX ?\n        "" : s.substr(start, len);\n}\n')),(0,i.kt)("h3",{id:"172-\u5b57\u7b26\u4e32\u6392\u5217"},"1.7.2 \u5b57\u7b26\u4e32\u6392\u5217"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"/* \u5224\u65ad s \u4e2d\u662f\u5426\u5b58\u5728 t \u7684\u6392\u5217 */\nbool checkInclusion(string t, string s) {\n    unordered_map<char, int> need, window;\n    for (char c : t) need[c]++;\n\n    int left = 0, right = 0;\n    int valid = 0;\n    while (right < s.size()) {\n        char c = s[right];\n        right++;\n        // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n        if (need.count(c)) {\n            window[c]++;\n            if (window[c] == need[c])\n                valid++;\n        }\n\n        // \u5224\u65ad\u5de6\u4fa7\u7a97\u53e3\u662f\u5426\u8981\u6536\u7f29\n        while (right - left >= t.size()) {\n            // \u5728\u8fd9\u91cc\u5224\u65ad\u662f\u5426\u627e\u5230\u4e86\u5408\u6cd5\u7684\u5b50\u4e32\n            if (valid == need.size())\n                return true;\n            char d = s[left];\n            left++;\n            // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n            if (need.count(d)) {\n                if (window[d] == need[d])\n                    valid--;\n                window[d]--;\n            }\n        }\n    }\n    // \u672a\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u4e32\n    return false;\n}\n")),(0,i.kt)("h3",{id:"173-\u627e\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},"1.7.3 \u627e\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> findAnagrams(string s, string t) {\n    unordered_map<char, int> need, window;\n    for (char c : t) need[c]++;\n\n    int left = 0, right = 0;\n    int valid = 0;\n    vector<int> res; // \u8bb0\u5f55\u7ed3\u679c\n    while (right < s.size()) {\n        char c = s[right];\n        right++;\n        // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n        if (need.count(c)) {\n            window[c]++;\n            if (window[c] == need[c]) \n                valid++;\n        }\n        // \u5224\u65ad\u5de6\u4fa7\u7a97\u53e3\u662f\u5426\u8981\u6536\u7f29\n        while (right - left >= t.size()) {\n            // \u5f53\u7a97\u53e3\u7b26\u5408\u6761\u4ef6\u65f6\uff0c\u628a\u8d77\u59cb\u7d22\u5f15\u52a0\u5165 res\n            if (valid == need.size())\n                res.push_back(left);\n            char d = s[left];\n            left++;\n            // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n            if (need.count(d)) {\n                if (window[d] == need[d])\n                    valid--;\n                window[d]--;\n            }\n        }\n    }\n    return res;\n}\n")),(0,i.kt)("h3",{id:"174-\u6700\u957f\u65e0\u91cd\u590d\u5b50\u4e32"},"1.7.4 \u6700\u957f\u65e0\u91cd\u590d\u5b50\u4e32"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int lengthOfLongestSubstring(string s) {\n    unordered_map<char, int> window;\n    int left = 0, right = 0;\n    int res = 0; // \u8bb0\u5f55\u7ed3\u679c\n    while (right < s.size()) {\n        char c = s[right];\n        right++;\n        // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n        window[c]++;\n        // \u5224\u65ad\u5de6\u4fa7\u7a97\u53e3\u662f\u5426\u8981\u6536\u7f29\n        while (window[c] > 1) {\n            char d = s[left];\n            left++;\n            // \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n            window[d]--;\n        }\n        // \u5728\u8fd9\u91cc\u66f4\u65b0\u7b54\u6848\n        res = max(res, right - left);\n    }\n    return res;\n}\n")))}u.isMDXComponent=!0}}]);