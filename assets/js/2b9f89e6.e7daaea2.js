"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[6292],{3905:function(n,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var t=r(67294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function l(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function d(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var a=t.createContext({}),c=function(n){var e=t.useContext(a),r=e;return n&&(r="function"==typeof n?n(e):l(l({},e),n)),r},u=function(n){var e=c(n.components);return t.createElement(a.Provider,{value:e},n.children)},h="mdxType",s={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,o=n.originalType,a=n.parentName,u=d(n,["components","mdxType","originalType","parentName"]),h=c(r),p=i,f=h["".concat(a,".").concat(p)]||h[p]||s[p]||o;return r?t.createElement(f,l(l({ref:e},u),{},{components:r})):t.createElement(f,l({ref:e},u))}));function f(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=r.length,l=new Array(o);l[0]=p;var d={};for(var a in e)hasOwnProperty.call(e,a)&&(d[a]=e[a]);d.originalType=n,d[h]="string"==typeof n?n:i,l[1]=d;for(var c=2;c<o;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},44439:function(n,e,r){r.r(e),r.d(e,{assets:function(){return a},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var t=r(83117),i=(r(67294),r(3905));const o={},l="\u7b2c\u5341\u7ae0\uff1a\u524d\u7f00\u6811",d={unversionedId:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10",id:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10",title:"\u7b2c\u5341\u7ae0\uff1a\u524d\u7f00\u6811",description:"\u9762\u8bd5\u989862\uff1a\u5b9e\u73b0\u524d\u7f00\u6811",source:"@site/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10.md",sourceDirName:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main",slug:"/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter10.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7b2c\u4e5d\u7ae0\uff1a\u5806",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter09"},next:{title:"\u7b2c\u5341\u4e00\u7ae0\uff1a\u4e8c\u5206\u67e5\u627e",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter11"}},a={},c=[{value:"\u9762\u8bd5\u989862\uff1a\u5b9e\u73b0\u524d\u7f00\u6811",id:"\u9762\u8bd5\u989862\u5b9e\u73b0\u524d\u7f00\u6811",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801",level:3},{value:"\u9762\u8bd5\u989863\uff1a\u66ff\u6362\u5355\u8bcd",id:"\u9762\u8bd5\u989863\u66ff\u6362\u5355\u8bcd",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-1",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-1",level:3},{value:"\u9762\u8bd5\u989864\uff1a\u795e\u5947\u7684\u5b57\u5178",id:"\u9762\u8bd5\u989864\u795e\u5947\u7684\u5b57\u5178",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-2",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-2",level:3},{value:"\u9762\u8bd5\u989865\uff1a\u6700\u77ed\u7684\u5355\u8bcd\u7f16\u7801",id:"\u9762\u8bd5\u989865\u6700\u77ed\u7684\u5355\u8bcd\u7f16\u7801",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-3",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-3",level:3},{value:"\u9762\u8bd5\u989866\uff1a\u5355\u8bcd\u4e4b\u548c",id:"\u9762\u8bd5\u989866\u5355\u8bcd\u4e4b\u548c",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-4",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-4",level:3},{value:"\u9762\u8bd5\u989867\uff1a\u6700\u5927\u7684\u5f02\u6216",id:"\u9762\u8bd5\u989867\u6700\u5927\u7684\u5f02\u6216",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-5",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-5",level:3}],u={toc:c};function h(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u7b2c\u5341\u7ae0\u524d\u7f00\u6811"},"\u7b2c\u5341\u7ae0\uff1a\u524d\u7f00\u6811"),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989862\u5b9e\u73b0\u524d\u7f00\u6811"},"\u9762\u8bd5\u989862\uff1a\u5b9e\u73b0\u524d\u7f00\u6811"),(0,i.kt)("h3",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u8bf7\u8bbe\u8ba1\u5b9e\u73b0\u4e00\u4e2a\u524d\u7f00\u6811Trie\uff0c\u5b83\u6709\u5982\u4e0b\u64cd\u4f5c\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570insert\uff0c\u5f80\u524d\u7f00\u6811\u91cc\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570search\uff0c\u67e5\u627e\u5b57\u7b26\u4e32\u3002\u5982\u679c\u524d\u7f00\u6811\u91cc\u5305\u542b\u8be5\u5b57\u7b26\u4e32\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570startWith\uff0c\u67e5\u627e\u5b57\u7b26\u4e32\u524d\u7f00\u3002\u5982\u679c\u524d\u7f00\u6811\u91cc\u5305\u542b\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\u3002")),(0,i.kt)("p",null,'\u4f8b\u5982\uff0c\u8c03\u7528\u51fd\u6570insert\u5f80\u524d\u7f00\u6811\u91cc\u6dfb\u52a0\u5355\u8bcd"goodbye"\u4e4b\u540e\uff0c\u8f93\u5165"good"\u8c03\u7528\u51fd\u6570search\u8fd4\u56defalse\uff0c\u4f46\u8f93\u5165"good"\u8c03\u7528\u51fd\u6570startWide\u8fd4\u56detrue\u3002\u518d\u6b21\u8c03\u7528\u51fd\u6570insert\u6dfb\u52a0\u5355\u8bcd"good"\u4e4b\u540e\uff0c\u6b64\u65f6\u518d\u8f93\u5165"good"\u8c03\u7528\u51fd\u6570search\u5219\u8fd4\u56detrue\u3002'),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Trie {\n    private TrieNode root;\n\n    static class TrieNode {\n        TrieNode children[];\n        boolean isWord;\n        \n        public TrieNode() {\n            children = new TrieNode[26];\n        }\n    }\n    \n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new TrieNode();\n            }\n            \n            node = node.children[ch - 'a'];\n        }\n        \n        node.isWord = true;\n    }\n    \n    public boolean search(String word) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            \n            node = node.children[ch - 'a'];\n        }\n        \n        return node.isWord;\n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode node = root;\n        for (char ch : prefix.toCharArray()) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            \n            node = node.children[ch - 'a'];\n        }\n        \n        return true;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989863\u66ff\u6362\u5355\u8bcd"},"\u9762\u8bd5\u989863\uff1a\u66ff\u6362\u5355\u8bcd"),(0,i.kt)("h3",{id:"\u9898\u76ee-1"},"\u9898\u76ee"),(0,i.kt)("p",null,'\u82f1\u8bed\u91cc\u6709\u4e00\u4e2a\u6982\u5ff5\u53eb\u8bcd\u6839\u3002\u6211\u4eec\u5728\u8bcd\u6839\u540e\u9762\u52a0\u4e0a\u82e5\u5e72\u5b57\u7b26\u5c31\u80fd\u62fc\u51fa\u66f4\u957f\u7684\u5355\u8bcd\u3002\u4f8b\u5982"an"\u662f\u4e00\u4e2a\u8bcd\u6839\uff0c\u5728\u5b83\u540e\u9762\u52a0\u4e0a"other"\u5c31\u80fd\u5f97\u5230\u53e6\u4e00\u4e2a\u5355\u8bcd"another"\u3002\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u7531\u8bcd\u6839\u7ec4\u6210\u7684\u5b57\u5178\u548c\u4e00\u4e2a\u82f1\u8bed\u53e5\u5b50\uff0c\u5982\u679c\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u91cc\u6709\u5b83\u7684\u8bcd\u6839\uff0c\u5219\u7528\u5b83\u7684\u8bcd\u6839\u66ff\u6362\u8be5\u5355\u8bcd\uff1b\u5982\u679c\u5355\u8bcd\u6ca1\u6709\u8bcd\u6839\uff0c\u5219\u4fdd\u7559\u8be5\u5355\u8bcd\u3002\u8bf7\u8f93\u51fa\u66ff\u6362\u540e\u7684\u53e5\u5b50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bcd\u6839\u5b57\u5178\u5305\u542b\u5b57\u7b26\u4e32','["cat", "bat", "rat"]','\uff0c\u82f1\u8bed\u53e5\u5b50\u4e3a"the cattle was rattled by the battery"\uff0c\u5219\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u662f"the cat was rat by the bat"\u3002'),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-1"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"static class TrieNode {\n    public TrieNode[] children;\n    public boolean isWord;\n\n    public TrieNode() {\n        children = new TrieNode[26];\n    }\n}\n\npublic String replaceWords(List<String> dict, String sentence) {\n    TrieNode root = buildTrie(dict);            \n    StringBuilder builder = new StringBuilder();\n\n    String[] words = sentence.split(\" \");\n    for (int i = 0; i < words.length; i++) {\n        String prefix = findPrefix(root, words[i]);\n        if (!prefix.isEmpty()) {\n            words[i] = prefix;\n        }   \n    }\n\n    return String.join(\" \", words);\n}\n\nprivate TrieNode buildTrie(List<String> dict) {\n    TrieNode root = new TrieNode();\n    for (String word : dict) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new TrieNode();\n            }\n\n            node = node.children[ch - 'a'];\n        }\n\n        node.isWord = true;\n    }\n\n    return root;\n}\n\nprivate String findPrefix(TrieNode root, String word) {\n    TrieNode node = root;\n    StringBuilder builder = new StringBuilder();\n    for (char ch : word.toCharArray()) {\n        if (node.isWord || node.children[ch - 'a'] == null) {\n            break;\n        }\n\n        builder.append(ch);\n        node = node.children[ch - 'a'];\n    }\n\n    return node.isWord ? builder.toString() : \"\";\n}\n")),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989864\u795e\u5947\u7684\u5b57\u5178"},"\u9762\u8bd5\u989864\uff1a\u795e\u5947\u7684\u5b57\u5178"),(0,i.kt)("h3",{id:"\u9898\u76ee-2"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u8bf7\u5b9e\u73b0\u6709\u5982\u4e0b\u4e24\u4e2a\u64cd\u4f5c\u7684\u795e\u5947\u5b57\u5178\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570buildDict\uff0c\u8f93\u5165\u5355\u8bcd\u6570\u7ec4\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570search\uff0c\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd\uff0c\u5224\u65ad\u80fd\u5426\u4fee\u6539\u8be5\u5355\u8bcd\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4f7f\u5f97\u4fee\u6539\u4e4b\u540e\u7684\u5355\u8bcd\u662f\u5b57\u5178\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u3002")),(0,i.kt)("p",null,"\u4f8b\u5982\u8f93\u5165",'["happy", "new", "year"]','\u521b\u5efa\u4e00\u4e2a\u795e\u5947\u5b57\u5178\u3002\u5982\u679c\u8f93\u5165\u5355\u8bcd"now"\u8fdb\u884csearch\u64cd\u4f5c\uff0c\u7531\u4e8e\u5c06\u5176\u4e2d\u7684\'o\'\u4fee\u6539\u6210\'e\'\u5c31\u5f97\u5230\u5b57\u5178\u4e2d\u7684"new"\uff0c\u56e0\u6b64\u8fd4\u56detrue\u3002\u5982\u679c\u8f93\u5165\u5355\u8bcd"new"\uff0c\u5c06\u5176\u4e2d\u4efb\u610f\u5b57\u7b26\u4fee\u6539\u6210\u53e6\u4e00\u4e0d\u540c\u7684\u5b57\u7b26\u90fd\u4e0d\u80fd\u5f97\u5230\u5b57\u5178\u91cc\u7684\u5355\u8bcd\uff0c\u56e0\u6b64\u8fd4\u56defalse\u3002'),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-2"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class MagicDictionary {\n    static class TrieNode {\n        public TrieNode[] children;\n        public boolean isWord;\n        \n        public TrieNode() {\n            children = new TrieNode[26];\n        }\n    }\n    \n    TrieNode root;\n\n    public MagicDictionary() {\n        root = new TrieNode();\n    }\n    \n    public void buildDict(String[] dict) {\n        for (String word : dict) {\n            TrieNode node = root;\n            for (char ch : word.toCharArray()) {\n                if (node.children[ch - 'a'] == null) {\n                    node.children[ch - 'a'] = new TrieNode();\n                }\n                \n                node = node.children[ch - 'a'];\n            }\n            \n            node.isWord = true;\n        }\n    }\n    \n    public boolean search(String word) {\n        return dfs(root, word, 0, 0);\n    }\n\n    private boolean dfs(TrieNode root, String word, int i, int edit) {\n        if (root == null) {\n            return false;\n        }\n        \n        if (root.isWord && i == word.length() && edit == 1) {\n            return true;\n        }\n\n        if (i < word.length() && edit <= 1) {\n            boolean found = false;\n            for (int j = 0; j < 26 && !found; j++) {\n                int next = j == word.charAt(i) - 'a' ? edit : edit + 1;\n                found = dfs(root.children[j], word, i + 1, next);\n            }\n\n            return found;\n        }\n\n        return false;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989865\u6700\u77ed\u7684\u5355\u8bcd\u7f16\u7801"},"\u9762\u8bd5\u989865\uff1a\u6700\u77ed\u7684\u5355\u8bcd\u7f16\u7801"),(0,i.kt)("h3",{id:"\u9898\u76ee-3"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709n\u4e2a\u5355\u8bcd\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u7f16\u7801\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u548cn\u4e2a\u4e0b\u6807\u3002\u5047\u5982\u7ed9\u5b9a\u5355\u8bcd\u6570\u7ec4",'["time", "me", "bell"]','\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u7f16\u7801\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32"time#bell#"\uff0c\u7136\u540e\u8fd9\u4e9b\u5355\u8bcd\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807',"[0, 2, 5]",'\u5f97\u5230\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0b\u6807\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u4ece\u7f16\u7801\u4e4b\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e2d\u76f8\u5e94\u7684\u4f4d\u7f6e\u5f00\u59cb\u626b\u63cf\u76f4\u5230\u9047\u5230"#"\u5b57\u7b26\u524d\u6240\u7ecf\u8fc7\u7684\u5b50\u5b57\u7b26\u4e32\u4e3a\u5355\u8bcd\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u3002\u4f8b\u5982\u4ece"time#bell#"\u4e0b\u68072\u7684\u4f4d\u7f6e\u5f00\u59cb\u626b\u63cf\u76f4\u5230\u9047\u5230"#"\u524d\u7ecf\u8fc7\u5b50\u5b57\u7b26\u4e32"me"\u662f\u7ed9\u5b9a\u5355\u8bcd\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u3002'),(0,i.kt)("p",null,"\u7ed9\u6211\u4eec\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\uff0c\u8bf7\u95ee\u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u628a\u8fd9\u4e9b\u5355\u8bcd\u7f16\u7801\u4e4b\u540e\u5f97\u5230\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff1f\u5982\u679c\u8f93\u5165\u662f\u5b57\u7b26\u4e32\u6570\u7ec4",'["time", "me", "bell"]','\uff0c\u7f16\u7801\u4e4b\u540e\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u662f"time#bell#"\uff0c\u957f\u5ea6\u662f10\u3002'),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-3"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"static class TrieNode {\n    public TrieNode[] children;\n    public TrieNode() {\n        children = new TrieNode[26];\n    }\n}\n\npublic int minimumLengthEncoding(String[] words) {\n    TrieNode root = buildTrie(words);\n\n    int total[] = {0};\n    dfs(root, 1, total);\n    return total[0];\n}\n\nprivate TrieNode buildTrie(String[] words) {\n    TrieNode root = new TrieNode();\n    for (String word : words) {\n        TrieNode node = root;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new TrieNode();\n            }\n\n            node = node.children[ch - 'a'];\n        }\n    }\n\n    return root;        \n}\n\nprivate void dfs(TrieNode root, int length, int[] total) {\n    boolean isLeaf = true;\n    for (TrieNode child : root.children) {\n        if (child != null) {\n            isLeaf = false;\n            dfs(child, length + 1, total);\n        }\n    }\n\n    if (isLeaf) {\n        total[0] += length;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989866\u5355\u8bcd\u4e4b\u548c"},"\u9762\u8bd5\u989866\uff1a\u5355\u8bcd\u4e4b\u548c"),(0,i.kt)("h3",{id:"\u9898\u76ee-4"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u8bf7\u8bbe\u8ba1\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u578bMapSum\uff0c\u5b83\u6709\u5982\u4e0b\u4e24\u4e2a\u64cd\u4f5c\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570insert\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5f80\u6570\u636e\u96c6\u5408\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u503c\u3002\u5982\u679c\u6570\u636e\u96c6\u5408\u4e2d\u5df2\u7ecf\u5305\u542b\u8be5\u5b57\u7b26\u4e32\uff0c\u5219\u5c06\u8be5\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u503c\u66ff\u6362\u6210\u65b0\u503c\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u51fd\u6570sum\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6570\u636e\u96c6\u5408\u91cc\u6240\u6709\u4ee5\u8be5\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\u5bf9\u5e94\u503c\u4e4b\u548c\u3002")),(0,i.kt)("p",null,'\u4f8b\u5982\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u51fd\u6570insert\u6dfb\u52a0\u5b57\u7b26\u4e32"happy"\u548c\u5b83\u7684\u503c3\uff0c\u6b64\u65f6\u5982\u679c\u8f93\u5165"hap"\u8c03\u7528sum\u5219\u8fd4\u56de3\u3002\u7b2c\u4e8c\u6b21\u518d\u7528\u51fd\u6570insert\u6dfb\u52a0\u5b57\u7b26\u4e32"happen"\u548c\u5b83\u7684\u503c2\uff0c\u6b64\u65f6\u5982\u679c\u8f93\u5165"hap"\u8c03\u7528sum\u5219\u8fd4\u56de5\u3002'),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-4"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class MapSum {\n    \n    static class TreeNode {\n        public TreeNode[] children;\n        public int value;\n        \n        public TreeNode() {\n            children = new TreeNode[26];\n        }\n    }\n    \n    private TreeNode root;\n\n    public MapSum() {\n        root = new TreeNode();\n    }\n    \n    public void insert(String key, int val) {\n        TreeNode node = root;\n        for (int i = 0; i < key.length(); ++i) {\n            char ch = key.charAt(i);\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new TreeNode();\n            }\n            \n            node = node.children[ch - 'a'];\n        }\n        \n        node.value = val;\n    }\n    \n    public int sum(String prefix) {\n        TreeNode node = root;\n        for (int i = 0; i < prefix.length(); ++i) {\n            char ch = prefix.charAt(i);\n            if (node.children[ch - 'a'] == null) {\n                return 0;\n            }\n            \n            node = node.children[ch - 'a'];\n        }\n        \n        return getSum(node);\n    }\n    \n    private int getSum(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n        \n        int result = node.value;\n        for (TreeNode child : node.children) {\n            result += getSum(child);\n        }\n        \n        return result;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u9762\u8bd5\u989867\u6700\u5927\u7684\u5f02\u6216"},"\u9762\u8bd5\u989867\uff1a\u6700\u5927\u7684\u5f02\u6216"),(0,i.kt)("h3",{id:"\u9898\u76ee-5"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff08\u6bcf\u4e2a\u6570\u5b57\u90fd\u5927\u4e8e\u6216\u8005\u7b49\u4e8e0\uff09\uff0c\u8bf7\u8ba1\u7b97\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u5f02\u6216\u7684\u6700\u5927\u503c\u3002\u4f8b\u5982\u5728\u6570\u7ec4","[1, 3, 4, 7]","\u4e2d\uff0c3\u548c4\u7684\u5f02\u6216\u7ed3\u679c\u6700\u5927\uff0c\u5f02\u6216\u7ed3\u679c\u4e3a7\u3002"),(0,i.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-5"},"\u53c2\u8003\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"static class TrieNode {\n    public TrieNode[] children;\n\n    public TrieNode () {\n        children = new TrieNode[2];\n    }\n}\n\npublic int findMaximumXOR(int[] nums) {\n    TrieNode root = buildTrie(nums);\n    int max = 0;\n    for (int num : nums) {\n        TrieNode node = root;\n        int xor = 0;\n        for (int i = 31; i >= 0; i--) {\n            int bit = (num >> i) & 1;\n            if (node.children[1 - bit] != null) {\n                xor = (xor << 1) + 1;\n                node = node.children[1 - bit];\n            } else {\n                xor = xor << 1;\n                node = node.children[bit];\n            }\n        }\n\n        max = Math.max(max, xor);\n    }\n\n    return max;\n}\n\nprivate TrieNode buildTrie(int[] nums) {\n    TrieNode root = new TrieNode();\n    for (int num : nums) {\n        TrieNode node = root;\n        for (int i = 31; i >= 0; i--) {\n            int bit = (num >> i) & 1;\n            if (node.children[bit] == null) {\n                node.children[bit] = new TrieNode();\n            }\n\n            node = node.children[bit];\n        }\n    }\n\n    return root;\n}\n")))}h.isMDXComponent=!0}}]);