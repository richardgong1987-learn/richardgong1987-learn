"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[2990],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=r.createContext({}),u=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(c.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,c=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),m=u(t),d=a,g=m["".concat(c,".").concat(d)]||m[d]||s[d]||l;return t?r.createElement(g,i(i({ref:e},p),{},{components:t})):r.createElement(g,i({ref:e},p))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o.mdxType="string"==typeof n?n:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},12026:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=t(83117),a=t(80102),l=(t(67294),t(3905)),i=["components"],o={},c="5.8 \u5982\u4f55\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5\u505a\u65f6\u95f4\u7ba1\u7406",u={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898",title:"5.8 \u5982\u4f55\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5\u505a\u65f6\u95f4\u7ba1\u7406",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u8d2a\u5fc3\u7b97\u6cd5\u4e4b\u533a\u95f4\u8c03\u5ea6\u95ee\u9898.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.17 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b8c\u5168\u80cc\u5305\u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u96f6\u94b1"},next:{title:"2.13 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff1a\u9ad8\u697c\u6254\u9e21\u86cb\uff08\u8fdb\u9636\uff09",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u9ad8\u697c\u6254\u9e21\u86cb\u8fdb\u9636"}},p=[{value:"5.8.2 \u8d2a\u5fc3\u89e3\u6cd5",id:"582-\u8d2a\u5fc3\u89e3\u6cd5",children:[],level:3},{value:"5.8.3 \u5e94\u7528\u4e3e\u4f8b",id:"583-\u5e94\u7528\u4e3e\u4f8b",children:[],level:3}],s={toc:p};function m(n){var e=n.components,t=(0,a.Z)(n,i);return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"58-\u5982\u4f55\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5\u505a\u65f6\u95f4\u7ba1\u7406"},"5.8 \u5982\u4f55\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5\u505a\u65f6\u95f4\u7ba1\u7406"),(0,l.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/non-overlapping-intervals/"},"435. \u65e0\u91cd\u53e0\u533a\u95f4")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons"},"452.\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403")),(0,l.kt)("p",null,"\u8a00\u5f52\u6b63\u4f20\uff0c\u672c\u6587\u89e3\u51b3\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u8d2a\u5fc3\u7b97\u6cd5\u95ee\u9898 Interval Scheduling\uff08\u533a\u95f4\u8c03\u5ea6\u95ee\u9898\uff09\u3002\u7ed9\u4f60\u5f88\u591a\u5f62\u5982 ",(0,l.kt)("inlineCode",{parentName:"p"},"[start, end]")," \u7684\u95ed\u533a\u95f4\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u7b97\u51fa\u8fd9\u4e9b\u533a\u95f4\u4e2d\u6700\u591a\u6709\u51e0\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4"),"\u3002\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int intervalSchedule(int[][] intvs);\n")),(0,l.kt)("h3",{id:"582-\u8d2a\u5fc3\u89e3\u6cd5"},"5.8.2 \u8d2a\u5fc3\u89e3\u6cd5"),(0,l.kt)("p",null,"\u770b\u4e0b\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int intervalSchedule(int[][] intvs) {\n    if (intvs.length == 0) return 0;\n    // \u6309 end \u5347\u5e8f\u6392\u5e8f\n    Arrays.sort(intvs, new Comparator<int[]>() {\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    // \u81f3\u5c11\u6709\u4e00\u4e2a\u533a\u95f4\u4e0d\u76f8\u4ea4\n    int count = 1;\n    // \u6392\u5e8f\u540e\uff0c\u7b2c\u4e00\u4e2a\u533a\u95f4\u5c31\u662f x\n    int x_end = intvs[0][1];\n    for (int[] interval : intvs) {\n        int start = interval[0];\n        if (start >= x_end) {\n            // \u627e\u5230\u4e0b\u4e00\u4e2a\u9009\u62e9\u7684\u533a\u95f4\u4e86\n            count++;\n            x_end = interval[1];\n        }\n    }\n    return count;\n}\n")),(0,l.kt)("h3",{id:"583-\u5e94\u7528\u4e3e\u4f8b"},"5.8.3 \u5e94\u7528\u4e3e\u4f8b"),(0,l.kt)("p",null,"\u300c\u65e0\u91cd\u53e0\u533a\u95f4\u300d\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int eraseOverlapIntervals(int[][] intvs);\n")),(0,l.kt)("p",null,"\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u590d\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"intervalSchedule")," \u51fd\u6570\u5f97\u5230\u89e3\u6cd5\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int eraseOverlapIntervals(int[][] intervals) {\n    int n = intervals.length;\n    return n - intervalSchedule(intervals);\n}\n")),(0,l.kt)("p",null,"\u300c\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403\u300d\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int findMinArrowShots(int[][] intvs);\n")),(0,l.kt)("p",null,"\u53ea\u8981\u5c06\u4e4b\u524d\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"intervalSchedule")," \u7b97\u6cd5\u7a0d\u4f5c\u4fee\u6539\uff0c\u5c31\u662f\u8fd9\u9053\u9898\u76ee\u7684\u7b54\u6848\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int findMinArrowShots(int[][] intvs) {\n    if (intvs.length == 0) return 0;\n    Arrays.sort(intvs, new Comparator<int[]>() {\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    \n    int count = 1;\n    int end = intvs[0][1];\n    for (int[] interval : intvs) {\n        int start = interval[0];\n        // \u628a >= \u6539\u6210 > \u5c31\u884c\u4e86\n        if (start > x_end) {\n            count++;\n            x_end = interval[1];\n        }\n    }\n    return count;\n}\n")))}m.isMDXComponent=!0}}]);