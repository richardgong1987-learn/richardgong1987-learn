"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[2456],{3905:function(t,n,e){e.d(n,{Zo:function(){return d},kt:function(){return c}});var r=e(67294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function i(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?i(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function p(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var l=r.createContext({}),s=function(t){var n=r.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},d=function(t){var n=s(t.components);return r.createElement(l.Provider,{value:n},t.children)},u="mdxType",k={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),u=s(e),m=a,c=u["".concat(l,".").concat(m)]||u[m]||k[m]||i;return e?r.createElement(c,o(o({ref:n},d),{},{components:e})):r.createElement(c,o({ref:n},d))}));function c(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var i=e.length,o=new Array(i);o[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=t,p[u]="string"==typeof t?t:a,o[1]=p;for(var s=2;s<i;s++)o[s]=e[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},85668:function(t,n,e){e.r(n),e.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var r=e(83117),a=(e(67294),e(3905));const i={},o="\u628a Dijkstra \u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898",p={unversionedId:"c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5",id:"c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5",title:"\u628a Dijkstra \u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898",description:"Dijkstra \u7b97\u6cd5\uff08\u4e00\u822c\u97f3\u8bd1\u6210\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff09\u65e0\u975e\u5c31\u662f\u4e00\u4e2a BFS \u7b97\u6cd5\u7684\u52a0\u5f3a\u7248\uff0c\u5b83\u4eec\u90fd\u662f\u4ece\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\u884d\u751f\u51fa\u6765\u7684\u3002",source:"@site/docs/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5.md",sourceDirName:"c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1",slug:"/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/5.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BFS \u7b97\u6cd5\u89e3\u9898\u5957\u8def\u6846\u67b6",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/4"},next:{title:"\u4e00\u9996\u4e8c\u5206\u641c\u7d22\u8bd7",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/algorithm_cheat_sheet/1/6"}},l={},s=[],d={toc:s};function u(t){let{components:n,...e}=t;return(0,a.kt)("wrapper",(0,r.Z)({},d,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u628a-dijkstra-\u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898"},"\u628a Dijkstra \u7b97\u6cd5\u53d8\u6210\u4e86\u9ed8\u5199\u9898"),(0,a.kt)("p",null,"Dijkstra \u7b97\u6cd5\uff08\u4e00\u822c\u97f3\u8bd1\u6210\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff09\u65e0\u975e\u5c31\u662f\u4e00\u4e2a BFS \u7b97\u6cd5\u7684\u52a0\u5f3a\u7248\uff0c\u5b83\u4eec\u90fd\u662f\u4ece\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\u884d\u751f\u51fa\u6765\u7684\u3002"),(0,a.kt)("p",null,"\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u5728 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye/xue-xi-shu-ju-jie-gou-he-suan-fa-de-gao-xiao-fang-fa"},"\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u6846\u67b6\u601d\u7ef4")," \u4e2d\u8fd9\u4e48\u5f3a\u8c03\u4e8c\u53c9\u6811\u7684\u539f\u56e0\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u4e0b\u9762\u6211\u4eec\u7531\u6d45\u5165\u6df1\uff0c\u4ece\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\u804a\u5230 Dijkstra \u7b97\u6cd5\uff0c\u7ed9\u51fa Dijkstra \u7b97\u6cd5\u7684\u4ee3\u7801\u6846\u67b6\uff0c\u987a\u624b\u79d2\u6740\u51e0\u9053\u8fd0\u7528 Dijkstra \u7b97\u6cd5\u7684\u9898\u76ee"),"\u3002"),(0,a.kt)("h1",{id:"\u56fe\u7684\u62bd\u8c61"},"\u56fe\u7684\u62bd\u8c61"),(0,a.kt)("p",null,"\u524d\u6587 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-2/tu"},"\u56fe\u8bba\u7b2c\u4e00\u671f\uff1a\u904d\u5386\u57fa\u7840")," \u8bf4\u8fc7\u300c\u56fe\u300d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u57fa\u672c\u5b9e\u73b0\uff0c\u56fe\u4e2d\u7684\u8282\u70b9\u4e00\u822c\u5c31\u62bd\u8c61\u6210\u4e00\u4e2a\u6570\u5b57\uff08\u7d22\u5f15\uff09\uff0c\u56fe\u7684\u5177\u4f53\u5b9e\u73b0\u4e00\u822c\u662f\u300c\u90bb\u63a5\u77e9\u9635\u300d\u6216\u8005\u300c\u90bb\u63a5\u8868\u300d\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2Fd9cabcdaabfc00a3529d1097256f11dd20608089.jpg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u6bd4\u5982\u4e0a\u56fe\u8fd9\u5e45\u56fe\u7528\u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\u7684\u5b58\u50a8\u65b9\u5f0f\u5982\u4e0b\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F7978b9555d0cc81eeeb800cec93a58578f4e71e8.jpeg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u524d\u6587 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-2/tuo-pu-pai-xu"},"\u56fe\u8bba\u7b2c\u4e8c\u671f\uff1a\u62d3\u6251\u6392\u5e8f")," \u544a\u8bc9\u4f60\uff0c\u6211\u4eec\u7528\u90bb\u63a5\u8868\u7684\u573a\u666f\u66f4\u591a\uff0c\u7ed3\u5408\u4e0a\u56fe\uff0c\u4e00\u5e45\u56fe\u53ef\u4ee5\u7528\u5982\u4e0b Java \u4ee3\u7801\u8868\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// graph[s] \u5b58\u50a8\u8282\u70b9 s \u6307\u5411\u7684\u8282\u70b9\uff08\u51fa\u5ea6\uff09\nList<Integer>[] graph;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f60\u60f3\u628a\u4e00\u4e2a\u95ee\u9898\u62bd\u8c61\u6210\u300c\u56fe\u300d\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u9996\u5148\u8981\u5b9e\u73b0\u4e00\u4e2a API")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"adj")),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u8282\u70b9 s \u8fd4\u56de s \u7684\u76f8\u90bb\u8282\u70b9\nList<Integer> adj(int s);\n")),(0,a.kt)("p",null,"\u7c7b\u4f3c\u591a\u53c9\u6811\u8282\u70b9\u4e2d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"children")," \u5b57\u6bb5\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"adj(s)")," \u5c31\u662f\u8ba1\u7b97\u4e00\u4e2a\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u7684\u76f8\u90bb\u8282\u70b9\u3002"),(0,a.kt)("p",null,"\u6bd4\u5982\u4e0a\u9762\u8bf4\u7684\u7528\u90bb\u63a5\u8868\u8868\u793a\u300c\u56fe\u300d\u7684\u65b9\u5f0f\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"adj")," \u51fd\u6570\u5c31\u53ef\u4ee5\u8fd9\u6837\u8868\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"List<Integer>[] graph;\n\n\n// \u8f93\u5165\u8282\u70b9 s\uff0c\u8fd4\u56de s \u7684\u76f8\u90bb\u8282\u70b9\nList<Integer> adj(int s) {\n    return graph[s];\n}\n")),(0,a.kt)("p",null,"\u5f53\u7136\uff0c\u5bf9\u4e8e\u300c\u52a0\u6743\u56fe\u300d\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u91cd\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u62bd\u8c61\u51fa\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"weight")," \u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8fd4\u56de\u8282\u70b9 from \u5230\u8282\u70b9 to \u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u91cd\nint weight(int from, int to);\n")),(0,a.kt)("p",null,"\u8fd9\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"weight")," \u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u800c\u5b9a\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u7b97\u6cd5\u9898\uff0c\u9898\u76ee\u7ed9\u7684\u300c\u6743\u91cd\u300d\u542b\u4e49\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u6211\u4eec\u5b58\u50a8\u6743\u91cd\u7684\u65b9\u5f0f\u4e5f\u4e0d\u4e00\u6837\u3002"),(0,a.kt)("p",null,"\u6709\u4e86\u4e0a\u8ff0\u57fa\u7840\u77e5\u8bc6\uff0c\u5c31\u53ef\u4ee5\u641e\u5b9a Dijkstra \u7b97\u6cd5\u4e86\uff0c\u4e0b\u9762\u6211\u7ed9\u4f60\u4ece\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\u5f00\u59cb\u63a8\u6f14\u51fa Dijkstra \u7b97\u6cd5\u7684\u5b9e\u73b0\u3002"),(0,a.kt)("h1",{id:"\u4e8c\u53c9\u6811\u5c42\u7ea7\u904d\u5386\u548c-bfs-\u7b97\u6cd5"},"\u4e8c\u53c9\u6811\u5c42\u7ea7\u904d\u5386\u548c BFS \u7b97\u6cd5"),(0,a.kt)("p",null,"\u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7\u4e8c\u53c9\u6811\u7684\u5c42\u7ea7\u904d\u5386\u6846\u67b6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u5c42\u5e8f\u904d\u5386\u8fd9\u68f5\u4e8c\u53c9\u6811\nvoid levelTraverse(TreeNode root) {\n    if (root == null) return 0;\n    Queue<TreeNode> q = new LinkedList<>();\n    q.offer(root);\n\n\n    int depth = 1;\n    // \u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u5c42\n    while (!q.isEmpty()) {\n        int sz = q.size();\n        // \u4ece\u5de6\u5230\u53f3\u904d\u5386\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\n        for (int i = 0; i < sz; i++) {\n            TreeNode cur = q.poll();\n            printf("\u8282\u70b9 %s \u5728\u7b2c %s \u5c42", cur, depth);\n\n\n            // \u5c06\u4e0b\u4e00\u5c42\u8282\u70b9\u653e\u5165\u961f\u5217\n            if (cur.left != null) {\n                q.offer(cur.left);\n            }\n            if (cur.right != null) {\n                q.offer(cur.right);\n            }\n        }\n        depth++;\n    }\n}\n')),(0,a.kt)("p",null,"\u6211\u4eec\u5148\u6765\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff0c\u6ce8\u610f\u4e8c\u53c9\u6811\u7684\u5c42\u7ea7\u904d\u5386 ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u5faa\u73af\u91cc\u9762\u8fd8\u5957\u4e86\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\uff0c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\uff1f"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u5faa\u73af\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u7684\u914d\u5408\u6b63\u662f\u8fd9\u4e2a\u904d\u5386\u6846\u67b6\u8bbe\u8ba1\u7684\u5de7\u5999\u4e4b\u5904\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F1f45adf975a50bef0433f806a0c16f693ca3f0ed.jpeg?alt=media",alt:"img"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"while"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u63a7\u5236\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0b\u8d70\uff0c**"),(0,a.kt)("inlineCode",{parentName:"p"},"for"),"** ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u5229\u7528")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"sz"))," ",(0,a.kt)("strong",{parentName:"p"},"\u53d8\u91cf\u63a7\u5236\u4ece\u5de6\u5230\u53f3\u904d\u5386\u6bcf\u4e00\u5c42\u4e8c\u53c9\u6811\u8282\u70b9"),"\u3002"),(0,a.kt)("p",null,"\u6ce8\u610f\u6211\u4eec\u4ee3\u7801\u6846\u67b6\u4e2d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"depth")," \u53d8\u91cf\uff0c\u5176\u5b9e\u5c31\u8bb0\u5f55\u4e86\u5f53\u524d\u904d\u5386\u5230\u7684\u5c42\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"cur"),"\uff0c\u90fd\u77e5\u9053\u8fd9\u4e2a\u8282\u70b9\u5c5e\u4e8e\u7b2c\u51e0\u5c42\u3002"),(0,a.kt)("p",null,"\u7b97\u6cd5\u9898\u7ecf\u5e38\u4f1a\u95ee\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u5440\uff0c\u6700\u5c0f\u6df1\u5ea6\u5440\uff0c\u5c42\u5e8f\u904d\u5386\u7ed3\u679c\u5440\uff0c\u7b49\u7b49\u95ee\u9898\uff0c\u6240\u4ee5\u8bb0\u5f55\u4e0b\u6765\u8fd9\u4e2a\u6df1\u5ea6 ",(0,a.kt)("inlineCode",{parentName:"p"},"depth")," \u662f\u6709\u5fc5\u8981\u7684\u3002"),(0,a.kt)("p",null,"\u57fa\u4e8e\u4e8c\u53c9\u6811\u7684\u904d\u5386\u6846\u67b6\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u6269\u5c55\u51fa\u591a\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\u6846\u67b6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \u8f93\u5165\u4e00\u68f5\u591a\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u5c42\u5e8f\u904d\u5386\u8fd9\u68f5\u591a\u53c9\u6811\nvoid levelTraverse(TreeNode root) {\n    if (root == null) return 0;\n    Queue<TreeNode> q = new LinkedList<>();\n    q.offer(root);\n\n\n    int depth = 1;\n    // \u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u591a\u53c9\u6811\u7684\u6bcf\u4e00\u5c42\n    while (!q.isEmpty()) {\n        int sz = q.size();\n        // \u4ece\u5de6\u5230\u53f3\u904d\u5386\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\n        for (int i = 0; i < sz; i++) {\n            TreeNode cur = q.poll();\n            printf("\u8282\u70b9 %s \u5728\u7b2c %s \u5c42", cur, depth);\n\n\n            // \u5c06\u4e0b\u4e00\u5c42\u8282\u70b9\u653e\u5165\u961f\u5217\n            for (TreeNode child : cur.children) {\n                q.offer(child);\n            }\n        }\n        depth++;\n    }\n}\n')),(0,a.kt)("p",null,"\u57fa\u4e8e\u591a\u53c9\u6811\u7684\u904d\u5386\u6846\u67b6\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u6269\u5c55\u51fa BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u7684\u7b97\u6cd5\u6846\u67b6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \u8f93\u5165\u8d77\u70b9\uff0c\u8fdb\u884c BFS \u641c\u7d22\nint BFS(Node start) {\n    Queue<Node> q; // \u6838\u5fc3\u6570\u636e\u7ed3\u6784\n    Set<Node> visited; // \u907f\u514d\u8d70\u56de\u5934\u8def\n\n\n    q.offer(start); // \u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217\n    visited.add(start);\n\n\n    int step = 0; // \u8bb0\u5f55\u641c\u7d22\u7684\u6b65\u6570\n    while (q not empty) {\n        int sz = q.size();\n        /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u56db\u5468\u6269\u6563\u4e00\u6b65 */\n        for (int i = 0; i < sz; i++) {\n            Node cur = q.poll();\n            printf("\u4ece %s \u5230 %s \u7684\u6700\u77ed\u8ddd\u79bb\u662f %s", start, cur, step);\n\n\n            /* \u5c06 cur \u7684\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */\n            for (Node x : cur.adj()) {\n                if (x not in visited) {\n                    q.offer(x);\n                    visited.add(x);\n                }\n            }\n        }\n        step++;\n    }\n}\n')),(0,a.kt)("p",null,"\u5982\u679c\u5bf9 BFS \u7b97\u6cd5\u4e0d\u719f\u6089\uff0c\u53ef\u4ee5\u770b\u524d\u6587 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye-3/mu-lu-ye-1/bfs-kuang-jia"},"BFS \u7b97\u6cd5\u6846\u67b6"),"\uff0c\u8fd9\u91cc\u53ea\u662f\u4e3a\u4e86\u8ba9\u4f60\u505a\u4e2a\u5bf9\u6bd4\uff0c\u6240\u8c13 BFS \u7b97\u6cd5\uff0c\u5c31\u662f\u628a\u7b97\u6cd5\u95ee\u9898\u62bd\u8c61\u6210\u4e00\u5e45\u300c\u65e0\u6743\u56fe\u300d\uff0c\u7136\u540e\u7ee7\u7eed\u73a9\u4e8c\u53c9\u6811\u5c42\u7ea7\u904d\u5386\u90a3\u4e00\u5957\u7f62\u4e86\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff0c\u6211\u4eec\u7684 BFS \u7b97\u6cd5\u6846\u67b6\u4e5f\u662f")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"while"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u5d4c\u5957")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"for"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u7684\u5f62\u5f0f\uff0c\u4e5f\u7528\u4e86\u4e00\u4e2a")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"step"))," ",(0,a.kt)("strong",{parentName:"p"},"\u53d8\u91cf\u8bb0\u5f55")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"for"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u6267\u884c\u7684\u6b21\u6570\uff0c\u65e0\u975e\u5c31\u662f\u591a\u7528\u4e86\u4e00\u4e2a")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"visited"))," ",(0,a.kt)("strong",{parentName:"p"},"\u96c6\u5408\u8bb0\u5f55\u8d70\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u8d70\u56de\u5934\u8def\u7f62\u4e86"),"\u3002"),(0,a.kt)("p",null,"\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5462\uff1f"),(0,a.kt)("p",null,"\u6240\u8c13\u300c\u65e0\u6743\u56fe\u300d\uff0c\u4e0e\u5176\u8bf4\u6bcf\u6761\u300c\u8fb9\u300d\u6ca1\u6709\u6743\u91cd\uff0c\u4e0d\u5982\u8bf4\u6bcf\u6761\u300c\u8fb9\u300d\u7684\u6743\u91cd\u90fd\u662f 1\uff0c\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6743\u91cd\u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u300c\u8fb9\u300d\u7684\u6761\u6570\uff0c\u90a3\u53ef\u4e0d\u5c31\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," \u53d8\u91cf\u8bb0\u5f55\u7684\u503c\u4e48\uff1f"),(0,a.kt)("p",null,"\u518d\u52a0\u4e0a BFS \u7b97\u6cd5\u5229\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u4e00\u5c42\u4e00\u5c42\u5411\u5916\u6269\u6563\u7684\u903b\u8f91\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"visited")," \u96c6\u5408\u9632\u6b62\u8d70\u56de\u5934\u8def\u7684\u903b\u8f91\uff0c\u5f53\u4f60\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u62ff\u51fa\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"cur")," \u7684\u65f6\u5019\uff0c\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"cur")," \u7684\u6700\u77ed\u6743\u91cd\u5c31\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," \u8bb0\u5f55\u7684\u6b65\u6570\u3002"),(0,a.kt)("p",null,"\u4f46\u662f\uff0c\u5230\u4e86\u300c\u52a0\u6743\u56fe\u300d\u7684\u573a\u666f\uff0c\u4e8b\u60c5\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\uff0c\u56e0\u4e3a\u4f60\u4e0d\u80fd\u9ed8\u8ba4\u6bcf\u6761\u8fb9\u7684\u300c\u6743\u91cd\u300d\u90fd\u662f 1 \u4e86\uff0c\u8fd9\u4e2a\u6743\u91cd\u53ef\u4ee5\u662f\u4efb\u610f\u6b63\u6570\uff08Dijkstra \u7b97\u6cd5\u8981\u6c42\u4e0d\u80fd\u5b58\u5728\u8d1f\u6743\u91cd\u8fb9\uff09\uff0c\u6bd4\u5982\u4e0b\u56fe\u7684\u4f8b\u5b50\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F5e2ee661d2cfa076dddfd9e64225f991614d6e32.jpeg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u5982\u679c\u6cbf\u7528 BFS \u7b97\u6cd5\u4e2d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," \u53d8\u91cf\u8bb0\u5f55\u300c\u6b65\u6570\u300d\uff0c\u663e\u7136\u7ea2\u8272\u8def\u5f84\u4e00\u6b65\u5c31\u53ef\u4ee5\u8d70\u5230\u7ec8\u70b9\uff0c\u4f46\u662f\u8fd9\u4e00\u6b65\u7684\u6743\u91cd\u5f88\u5927\uff1b\u6b63\u786e\u7684\u6700\u5c0f\u6743\u91cd\u8def\u5f84\u5e94\u8be5\u662f\u7eff\u8272\u7684\u8def\u5f84\uff0c\u867d\u7136\u9700\u8981\u8d70\u5f88\u591a\u6b65\uff0c\u4f46\u662f\u8def\u5f84\u6743\u91cd\u4f9d\u7136\u5f88\u5c0f\u3002"),(0,a.kt)("p",null,"\u5176\u5b9e Dijkstra \u548c BFS \u7b97\u6cd5\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u5728\u8bb2\u89e3 Dijkstra \u7b97\u6cd5\u6846\u67b6\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u4e4b\u524d\u7684\u6846\u67b6\u8fdb\u884c\u5982\u4e0b\u6539\u9020\uff1a"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u60f3\u529e\u6cd5\u53bb\u6389")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"while"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af\u91cc\u9762\u7684")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"for"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5faa\u73af"),"\u3002"),(0,a.kt)("p",null,"\u4e3a\u4ec0\u4e48\uff1f\u6709\u4e86\u521a\u624d\u7684\u94fa\u57ab\uff0c\u8fd9\u4e2a\u4e0d\u96be\u7406\u89e3\uff0c\u521a\u624d\u8bf4 ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u662f\u5e72\u4ec0\u4e48\u7528\u7684\u6765\u7740\uff1f"),(0,a.kt)("p",null,"\u662f\u4e3a\u4e86\u8ba9\u4e8c\u53c9\u6811\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0b\u904d\u5386\uff0c\u8ba9 BFS \u7b97\u6cd5\u4e00\u6b65\u4e00\u6b65\u5411\u5916\u6269\u6563\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5c42\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"depth"),"\uff0c\u6216\u8005\u8fd9\u4e2a\u6b65\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"step"),"\uff0c\u5728\u4e4b\u524d\u7684\u573a\u666f\u4e2d\u6709\u7528\u3002"),(0,a.kt)("p",null,"\u4f46\u73b0\u5728\u6211\u4eec\u60f3\u89e3\u51b3\u300c\u52a0\u6743\u56fe\u300d\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u300c\u6b65\u6570\u300d\u5df2\u7ecf\u6ca1\u6709\u53c2\u8003\u610f\u4e49\u4e86\uff0c\u300c\u8def\u5f84\u7684\u6743\u91cd\u4e4b\u548c\u300d\u624d\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u8fd9\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u53ef\u4ee5\u88ab\u53bb\u6389\u3002"),(0,a.kt)("p",null,"\u600e\u4e48\u53bb\u6389\uff1f\u5c31\u62ff\u4e8c\u53c9\u6811\u7684\u5c42\u7ea7\u904d\u5386\u6765\u8bf4\uff0c\u5176\u5b9e\u4f60\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389 ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u76f8\u5173\u7684\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u904d\u5386\u8fd9\u68f5\u4e8c\u53c9\u6811\u6240\u6709\u8282\u70b9\nvoid levelTraverse(TreeNode root) {\n    if (root == null) return 0;\n    Queue<TreeNode> q = new LinkedList<>();\n    q.offer(root);\n\n\n    // \u904d\u5386\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\n    while (!q.isEmpty()) {\n        TreeNode cur = q.poll();\n        printf("\u6211\u4e0d\u77e5\u9053\u8282\u70b9 %s \u5728\u7b2c\u51e0\u5c42", cur);\n\n\n        // \u5c06\u5b50\u8282\u70b9\u653e\u5165\u961f\u5217\n        if (cur.left != null) {\n            q.offer(cur.left);\n        }\n        if (cur.right != null) {\n            q.offer(cur.right);\n        }\n    }\n}\n')),(0,a.kt)("p",null,"\u4f46\u95ee\u9898\u662f\uff0c\u6ca1\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\uff0c\u4f60\u4e5f\u6ca1\u529e\u6cd5\u7ef4\u62a4 ",(0,a.kt)("inlineCode",{parentName:"p"},"depth")," \u53d8\u91cf\u4e86\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u540c\u65f6\u7ef4\u62a4 ",(0,a.kt)("inlineCode",{parentName:"p"},"depth")," \u53d8\u91cf\uff0c\u8ba9\u6bcf\u4e2a\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"cur")," \u77e5\u9053\u81ea\u5df1\u5728\u7b2c\u51e0\u5c42\uff0c\u53ef\u4ee5\u60f3\u5176\u4ed6\u529e\u6cd5\uff0c\u6bd4\u5982\u65b0\u5efa\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"State")," \u7c7b\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'class State {\n    // \u8bb0\u5f55 node \u8282\u70b9\u7684\u6df1\u5ea6\n    int depth;\n    TreeNode node;\n\n\n    State(TreeNode node, int depth) {\n        this.depth = depth;\n        this.node = node;\n    }\n}\n\n\n// \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u904d\u5386\u8fd9\u68f5\u4e8c\u53c9\u6811\u6240\u6709\u8282\u70b9\nvoid levelTraverse(TreeNode root) {\n    if (root == null) return 0;\n    Queue<State> q = new LinkedList<>();\n    q.offer(new State(root, 1));\n\n\n    // \u904d\u5386\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\n    while (!q.isEmpty()) {\n        State cur = q.poll();\n        TreeNode cur_node = cur.node;\n        int cur_depth = cur.depth;\n        printf("\u8282\u70b9 %s \u5728\u7b2c %s \u5c42", cur_node, cur_depth);\n\n\n        // \u5c06\u5b50\u8282\u70b9\u653e\u5165\u961f\u5217\n        if (cur_node.left != null) {\n            q.offer(new State(cur_node.left, cur_depth + 1));\n        }\n        if (cur_node.right != null) {\n            q.offer(new State(cur_node.right, cur_depth + 1));\n        }\n    }\n}\n')),(0,a.kt)("p",null,"\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," \u5faa\u73af\u4e5f\u786e\u5207\u5730\u77e5\u9053\u6bcf\u4e2a\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u6df1\u5ea6\u4e86\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f60\u80fd\u591f\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u770b Dijkstra \u7b97\u6cd5\u7684\u4ee3\u7801\u6846\u67b6\u4e86"),"\u3002"),(0,a.kt)("h1",{id:"dijkstra-\u7b97\u6cd5\u6846\u67b6"},"Dijkstra \u7b97\u6cd5\u6846\u67b6"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u9996\u5148\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0b Dijkstra \u7b97\u6cd5\u7684\u7b7e\u540d"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u4e00\u5e45\u56fe\u548c\u4e00\u4e2a\u8d77\u70b9 start\uff0c\u8ba1\u7b97 start \u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint[] dijkstra(int start, List<Integer>[] graph);\n")),(0,a.kt)("p",null,"\u8f93\u5165\u662f\u4e00\u5e45\u56fe ",(0,a.kt)("inlineCode",{parentName:"p"},"graph")," \u548c\u4e00\u4e2a\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start"),"\uff0c\u8fd4\u56de\u662f\u4e00\u4e2a\u8bb0\u5f55\u6700\u77ed\u8def\u5f84\u6743\u91cd\u7684\u6570\u7ec4\u3002"),(0,a.kt)("p",null,"\u6bd4\u65b9\u8bf4\uff0c\u8f93\u5165\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start = 3"),"\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"int[]")," \u6570\u7ec4\uff0c\u5047\u8bbe\u8d4b\u503c\u7ed9 ",(0,a.kt)("inlineCode",{parentName:"p"},"distTo")," \u53d8\u91cf\uff0c\u90a3\u4e48\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," \u5230\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"6")," \u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd\u7684\u503c\u5c31\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"distTo[6]"),"\u3002"),(0,a.kt)("p",null,"\u662f\u7684\uff0c\u6807\u51c6\u7684 Dijkstra \u7b97\u6cd5\u4f1a\u628a\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u90fd\u7b97\u51fa\u6765\u3002"),(0,a.kt)("p",null,"\u5f53\u7136\uff0c\u5982\u679c\u4f60\u7684\u9700\u6c42\u53ea\u662f\u8ba1\u7b97\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u67d0\u4e00\u4e2a\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48\u5728\u6807\u51c6 Dijkstra \u7b97\u6cd5\u4e0a\u7a0d\u4f5c\u4fee\u6539\u5c31\u53ef\u4ee5\u66f4\u9ad8\u6548\u5730\u5b8c\u6210\u8fd9\u4e2a\u9700\u6c42\uff0c\u8fd9\u4e2a\u6211\u4eec\u540e\u9762\u518d\u8bf4\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5176\u6b21\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"State"))," ",(0,a.kt)("strong",{parentName:"p"},"\u7c7b\u6765\u8f85\u52a9\u7b97\u6cd5\u7684\u8fd0\u884c"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class State {\n    // \u56fe\u8282\u70b9\u7684 id\n    int id;\n    // \u4ece start \u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8ddd\u79bb\n    int distFromStart;\n\n\n    State(int id, int distFromStart) {\n        this.id = id;\n        this.distFromStart = distFromStart;\n    }\n}\n")),(0,a.kt)("p",null,"\u7c7b\u4f3c\u521a\u624d\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"State")," \u7c7b\u8bb0\u5f55\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u53d8\u91cf\u8bb0\u5f55\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u3002"),(0,a.kt)("p",null,"\u521a\u624d\u8bf4\u666e\u901a BFS \u7b97\u6cd5\u4e2d\uff0c\u6839\u636e BFS \u7684\u903b\u8f91\u548c\u65e0\u6743\u56fe\u7684\u7279\u70b9\uff0c\u7b2c\u4e00\u6b21\u9047\u5230\u67d0\u4e2a\u8282\u70b9\u6240\u8d70\u7684\u6b65\u6570\u5c31\u662f\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5\u7528\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"visited")," \u6570\u7ec4\u9632\u6b62\u8d70\u56de\u5934\u8def\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u3002"),(0,a.kt)("p",null,"\u52a0\u6743\u56fe\u4e2d\u7684 Dijkstra \u7b97\u6cd5\u548c\u65e0\u6743\u56fe\u4e2d\u7684\u666e\u901a BFS \u7b97\u6cd5\u4e0d\u540c\uff0c\u5728 Dijkstra \u7b97\u6cd5\u4e2d\uff0c\u4f60\u7b2c\u4e00\u6b21\u7ecf\u8fc7\u67d0\u4e2a\u8282\u70b9\u65f6\u7684\u8def\u5f84\u6743\u91cd\uff0c\u4e0d\u89c1\u5f97\u5c31\u662f\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u591a\u6b21\uff0c\u800c\u4e14\u6bcf\u6b21\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u53ef\u80fd\u90fd\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\u4e0b\u56fe\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F2495adfb0505d08a080f5fc1ddf106f1648299b8.jpeg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u6211\u4f1a\u7ecf\u8fc7\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," \u4e09\u6b21\uff0c\u6bcf\u6b21\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u503c\u90fd\u4e0d\u4e00\u6837\uff0c\u90a3\u6211\u53d6 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u6700\u5c0f\u7684\u90a3\u6b21\uff0c\u4e0d\u5c31\u662f\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," \u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd\u4e86\u4e48\uff1f"),(0,a.kt)("p",null,"\u597d\u4e86\uff0c\u660e\u767d\u4e0a\u9762\u7684\u51e0\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6765\u770b\u770b Dijkstra \u7b97\u6cd5\u7684\u4ee3\u7801\u6a21\u677f\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5176\u5b9e\uff0cDijkstra \u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u5e26 dp table\uff08\u6216\u8005\u8bf4\u5907\u5fd8\u5f55\uff09\u7684 BFS \u7b97\u6cd5\uff0c\u4f2a\u7801\u5982\u4e0b"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8fd4\u56de\u8282\u70b9 from \u5230\u8282\u70b9 to \u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u91cd\nint weight(int from, int to);\n\n\n// \u8f93\u5165\u8282\u70b9 s \u8fd4\u56de s \u7684\u76f8\u90bb\u8282\u70b9\nList<Integer> adj(int s);\n\n\n// \u8f93\u5165\u4e00\u5e45\u56fe\u548c\u4e00\u4e2a\u8d77\u70b9 start\uff0c\u8ba1\u7b97 start \u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint[] dijkstra(int start, List<Integer>[] graph) {\n    // \u56fe\u4e2d\u8282\u70b9\u7684\u4e2a\u6570\n    int V = graph.length;\n    // \u8bb0\u5f55\u6700\u77ed\u8def\u5f84\u7684\u6743\u91cd\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a dp table\n    // \u5b9a\u4e49\uff1adistTo[i] \u7684\u503c\u5c31\u662f\u8282\u70b9 start \u5230\u8fbe\u8282\u70b9 i \u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd\n    int[] distTo = new int[V];\n    // \u6c42\u6700\u5c0f\u503c\uff0c\u6240\u4ee5 dp table \u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\n    Arrays.fill(distTo, Integer.MAX_VALUE);\n    // base case\uff0cstart \u5230 start \u7684\u6700\u77ed\u8ddd\u79bb\u5c31\u662f 0\n    distTo[start] = 0;\n\n\n    // \u4f18\u5148\u7ea7\u961f\u5217\uff0cdistFromStart \u8f83\u5c0f\u7684\u6392\u5728\u524d\u9762\n    Queue<State> pq = new PriorityQueue<>((a, b) -> {\n        return a.distFromStart - b.distFromStart;\n    });\n\n\n    // \u4ece\u8d77\u70b9 start \u5f00\u59cb\u8fdb\u884c BFS\n    pq.offer(new State(start, 0));\n\n\n    while (!pq.isEmpty()) {\n        State curState = pq.poll();\n        int curNodeID = curState.id;\n        int curDistFromStart = curState.distFromStart;\n\n\n        if (curDistFromStart > distTo[curNodeID]) {\n            // \u5df2\u7ecf\u6709\u4e00\u6761\u66f4\u77ed\u7684\u8def\u5f84\u5230\u8fbe curNode \u8282\u70b9\u4e86\n            continue;\n        }\n        // \u5c06 curNode \u7684\u76f8\u90bb\u8282\u70b9\u88c5\u5165\u961f\u5217\n        for (int nextNodeID : adj(curNodeID)) {\n            // \u770b\u770b\u4ece curNode \u8fbe\u5230 nextNode \u7684\u8ddd\u79bb\u662f\u5426\u4f1a\u66f4\u77ed\n            int distToNextNode = distTo[curNodeID] + weight(curNodeID, nextNodeID);\n            if (distTo[nextNodeID] > distToNextNode) {\n                // \u66f4\u65b0 dp table\n                distTo[nextNodeID] = distToNextNode;\n                // \u5c06\u8fd9\u4e2a\u8282\u70b9\u4ee5\u53ca\u8ddd\u79bb\u653e\u5165\u961f\u5217\n                pq.offer(new State(nextNodeID, distToNextNode));\n            }\n        }\n    }\n    return distTo;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5bf9\u6bd4\u666e\u901a\u7684 BFS \u7b97\u6cd5\uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u7591\u95ee"),"\uff1a"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1\u3001\u6ca1\u6709")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"visited"))," ",(0,a.kt)("strong",{parentName:"p"},"\u96c6\u5408\u8bb0\u5f55\u5df2\u8bbf\u95ee\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u4f1a\u88ab\u8bbf\u95ee\u591a\u6b21\uff0c\u4f1a\u88ab\u591a\u6b21\u52a0\u5165\u961f\u5217\uff0c\u90a3\u4f1a\u4e0d\u4f1a\u5bfc\u81f4\u961f\u5217\u6c38\u8fdc\u4e0d\u4e3a\u7a7a\uff0c\u9020\u6210\u6b7b\u5faa\u73af"),"\uff1f"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2\u3001\u4e3a\u4ec0\u4e48\u7528\u4f18\u5148\u7ea7\u961f\u5217")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"PriorityQueue"))," ",(0,a.kt)("strong",{parentName:"p"},"\u800c\u4e0d\u662f")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"LinkedList"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5b9e\u73b0\u7684\u666e\u901a\u961f\u5217\uff1f\u4e3a\u4ec0\u4e48\u8981\u6309\u7167")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"distFromStart"))," ",(0,a.kt)("strong",{parentName:"p"},"\u7684\u503c\u6765\u6392\u5e8f"),"\uff1f"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3\u3001\u5982\u679c\u6211\u53ea\u60f3\u8ba1\u7b97\u8d77\u70b9")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"start"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5230\u67d0\u4e00\u4e2a\u7ec8\u70b9")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"end"))," ",(0,a.kt)("strong",{parentName:"p"},"\u7684\u6700\u77ed\u8def\u5f84\uff0c\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u7b97\u6cd5\uff0c\u63d0\u5347\u4e00\u4e9b\u6548\u7387"),"\uff1f"),(0,a.kt)("p",null,"\u6211\u4eec\u5148\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u4e0d\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"visited")," \u96c6\u5408\u4e5f\u4e0d\u4f1a\u6b7b\u5faa\u73af\u3002"),(0,a.kt)("p",null,"\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u6211\u6559\u4f60\u4e00\u4e2a\u601d\u8003\u65b9\u6cd5\uff1a"),(0,a.kt)("p",null,"\u5faa\u73af\u7ed3\u675f\u7684\u6761\u4ef6\u662f\u961f\u5217\u4e3a\u7a7a\uff0c\u90a3\u4e48\u4f60\u5c31\u8981\u6ce8\u610f\u770b\u4ec0\u4e48\u65f6\u5019\u5f80\u961f\u5217\u91cc\u653e\u5143\u7d20\uff08\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"offer"),"\uff09\u65b9\u6cd5\uff0c\u518d\u6ce8\u610f\u770b\u4ec0\u4e48\u65f6\u5019\u4ece\u961f\u5217\u5f80\u5916\u62ff\u5143\u7d20\uff08\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"poll")," \u65b9\u6cd5\uff09\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u5faa\u73af\u6bcf\u6267\u884c\u4e00\u6b21\uff0c\u90fd\u4f1a\u5f80\u5916\u62ff\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u60f3\u5f80\u961f\u5217\u91cc\u653e\u5143\u7d20\uff0c\u53ef\u5c31\u6709\u5f88\u591a\u9650\u5236\u4e86\uff0c\u5fc5\u987b\u6ee1\u8db3\u4e0b\u9762\u8fd9\u4e2a\u6761\u4ef6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u770b\u770b\u4ece curNode \u8fbe\u5230 nextNode \u7684\u8ddd\u79bb\u662f\u5426\u4f1a\u66f4\u77ed\nif (distTo[nextNodeID] > distToNextNode) {\n    // \u66f4\u65b0 dp table\n    distTo[nextNodeID] = distToNextNode;\n    pq.offer(new State(nextNodeID, distToNextNode));\n}\n")),(0,a.kt)("p",null,"\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u8bf4 ",(0,a.kt)("inlineCode",{parentName:"p"},"distTo")," \u6570\u7ec4\u53ef\u4ee5\u7406\u89e3\u6210\u6211\u4eec\u719f\u6089\u7684 dp table\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u903b\u8f91\u5c31\u662f\u5728\u4e0d\u65ad\u7684\u6700\u5c0f\u5316 ",(0,a.kt)("inlineCode",{parentName:"p"},"distTo")," \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff1a"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u80fd\u8ba9\u5230\u8fbe ",(0,a.kt)("inlineCode",{parentName:"p"},"nextNodeID")," \u7684\u8ddd\u79bb\u66f4\u77ed\uff0c\u90a3\u5c31\u66f4\u65b0 ",(0,a.kt)("inlineCode",{parentName:"p"},"distTo[nextNodeID]")," \u7684\u503c\uff0c\u8ba9\u4f60\u5165\u961f\uff0c\u5426\u5219\u7684\u8bdd\u5bf9\u4e0d\u8d77\uff0c\u4e0d\u8ba9\u5165\u961f\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u56e0\u4e3a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff08\u8def\u5f84\u6743\u91cd\uff09\u80af\u5b9a\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u503c\uff0c\u4e0d\u53ef\u80fd\u65e0\u9650\u51cf\u5c0f\u4e0b\u53bb\uff0c\u6240\u4ee5\u961f\u5217\u4e00\u5b9a\u4f1a\u7a7a\uff0c\u961f\u5217\u7a7a\u4e86\u4e4b\u540e\uff0c**"),(0,a.kt)("inlineCode",{parentName:"p"},"distTo"),"** ",(0,a.kt)("strong",{parentName:"p"},"\u6570\u7ec4\u4e2d\u8bb0\u5f55\u7684\u5c31\u662f\u4ece")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"start"))," ",(0,a.kt)("strong",{parentName:"p"},"\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb"),"\u3002"),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\u89e3\u7b54\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"PriorityQueue")," \u800c\u4e0d\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"LinkedList")," \u5b9e\u73b0\u7684\u666e\u901a\u961f\u5217\uff1f"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u975e\u8981\u7528\u666e\u901a\u961f\u5217\uff0c\u5176\u5b9e\u4e5f\u6ca1\u95ee\u9898\u7684\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u628a ",(0,a.kt)("inlineCode",{parentName:"p"},"PriorityQueue")," \u6539\u6210 ",(0,a.kt)("inlineCode",{parentName:"p"},"LinkedList"),"\uff0c\u4e5f\u80fd\u5f97\u5230\u6b63\u786e\u7b54\u6848\uff0c\u4f46\u662f\u6548\u7387\u4f1a\u4f4e\u5f88\u591a\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Dijkstra \u7b97\u6cd5\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u6548\u7387\u4e0a\u7684\u4f18\u5316\uff0c\u7c7b\u4f3c\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u8def"),"\u3002"),(0,a.kt)("p",null,"\u4e3a\u4ec0\u4e48\u8bf4\u662f\u4e00\u79cd\u8d2a\u5fc3\u601d\u8def\u5462\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u60f3\u8ba1\u7b97\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F2f2f2b1b5f385c262ba0163a4217b15a5f0ac5e2.jpeg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u4f60\u4e0b\u4e00\u6b65\u60f3\u904d\u5386\u90a3\u4e2a\u8282\u70b9\uff1f\u5c31\u5f53\u524d\u7684\u60c5\u51b5\u6765\u770b\uff0c\u4f60\u89c9\u5f97\u54ea\u6761\u8def\u5f84\u66f4\u6709\u300c\u6f5c\u529b\u300d\u6210\u4e3a\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u4e00\u90e8\u5206\uff1f"),(0,a.kt)("p",null,"\u4ece\u76ee\u524d\u7684\u60c5\u51b5\u6765\u770b\uff0c\u663e\u7136\u6a59\u8272\u8def\u5f84\u7684\u53ef\u80fd\u6027\u66f4\u5927\u561b\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," \u6392\u5728\u961f\u5217\u9760\u524d\u7684\u4f4d\u7f6e\uff0c\u4f18\u5148\u88ab\u62ff\u51fa\u6765\u5411\u540e\u904d\u5386\u3002"),(0,a.kt)("p",null,"\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"PriorityQueue")," \u4f5c\u4e3a\u961f\u5217\uff0c\u8ba9 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u7684\u503c\u8f83\u5c0f\u7684\u8282\u70b9\u6392\u5728\u524d\u9762\uff0c\u8fd9\u5c31\u7c7b\u4f3c\u6211\u4eec\u4e4b\u524d\u8bb2 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye-2/mu-lu-ye-3/tiao-yue-you-xi"},"\u8d2a\u5fc3\u7b97\u6cd5")," \u8bf4\u5230\u7684\u8d2a\u5fc3\u601d\u8def\uff0c\u53ef\u4ee5\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f18\u5316\u7b97\u6cd5\u7684\u6548\u7387\u3002"),(0,a.kt)("p",null,"\u5927\u5bb6\u5e94\u8be5\u542c\u8fc7 Bellman-Ford \u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e00\u79cd\u66f4\u901a\u7528\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5904\u7406\u5e26\u6709\u8d1f\u6743\u91cd\u8fb9\u7684\u56fe\uff0cBellman-Ford \u7b97\u6cd5\u903b\u8f91\u548c Dijkstra \u7b97\u6cd5\u975e\u5e38\u7c7b\u4f3c\uff0c\u7528\u5230\u7684\u5c31\u662f\u666e\u901a\u961f\u5217\uff0c\u672c\u6587\u5c31\u63d0\u4e00\u53e5\uff0c\u540e\u9762\u6709\u7a7a\u518d\u5177\u4f53\u5199\u3002"),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\u8bf4\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u53ea\u5173\u5fc3\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u67d0\u4e00\u4e2a\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u6700\u77ed\u8def\u5f84\uff0c\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\u63d0\u5347\u7b97\u6cd5\u6548\u7387\u3002"),(0,a.kt)("p",null,"\u80af\u5b9a\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6807\u51c6 Dijkstra \u7b97\u6cd5\u4f1a\u7b97\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f60\u53ea\u60f3\u8ba1\u7b97\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u6700\u77ed\u8def\u5f84\uff0c\u76f8\u5f53\u4e8e\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u5f53\u7136\u53ef\u4ee5\u63d0\u5347\u6548\u7387\u3002"),(0,a.kt)("p",null,"\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u505a\u7684\u4fee\u6539\u4e5f\u975e\u5e38\u5c11\uff0c\u53ea\u8981\u6539\u6539\u51fd\u6570\u7b7e\u540d\uff0c\u518d\u52a0\u4e2a if \u5224\u65ad\u5c31\u884c\u4e86\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u8d77\u70b9 start \u548c\u7ec8\u70b9 end\uff0c\u8ba1\u7b97\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint dijkstra(int start, int end, List<Integer>[] graph) {\n\n\n    // ...\n\n\n    while (!pq.isEmpty()) {\n        State curState = pq.poll();\n        int curNodeID = curState.id;\n        int curDistFromStart = curState.distFromStart;\n\n\n        // \u5728\u8fd9\u91cc\u52a0\u4e00\u4e2a\u5224\u65ad\u5c31\u884c\u4e86\uff0c\u5176\u4ed6\u4ee3\u7801\u4e0d\u7528\u6539\n        if (curNodeID == end) {\n            return curDistFromStart;\n        }\n\n\n        if (curDistFromStart > distTo[curNodeID]) {\n            continue;\n        }\n\n\n        // ...\n    }\n\n\n    // \u5982\u679c\u8fd0\u884c\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u4ece start \u65e0\u6cd5\u8d70\u5230 end\n    return Integer.MAX_VALUE;\n}\n")),(0,a.kt)("p",null,"\u56e0\u4e3a\u4f18\u5148\u7ea7\u961f\u5217\u81ea\u52a8\u6392\u5e8f\u7684\u6027\u8d28\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u6bcf\u6b21"),"\u4ece\u961f\u5217\u91cc\u9762\u62ff\u51fa\u6765\u7684\u90fd\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u503c\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u5f53\u4f60\u4ece\u961f\u5934\u62ff\u51fa\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u53d1\u73b0\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"end"),"\uff0c\u90a3\u4e48 ",(0,a.kt)("inlineCode",{parentName:"p"},"distFromStart")," \u5bf9\u5e94\u7684\u503c\u5c31\u662f\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u6700\u77ed\u8ddd\u79bb\u3002"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u7b97\u6cd5\u8f83\u4e4b\u524d\u7684\u5b9e\u73b0\u63d0\u524d return \u4e86\uff0c\u6240\u4ee5\u6548\u7387\u6709\u4e00\u5b9a\u7684\u63d0\u9ad8\u3002"),(0,a.kt)("h1",{id:"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"),(0,a.kt)("p",null,"Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u4f60\u53bb\u7f51\u4e0a\u67e5\uff0c\u53ef\u80fd\u4f1a\u544a\u8bc9\u4f60\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"O(ElogV)"),"\uff0c\u5176\u4e2d ",(0,a.kt)("inlineCode",{parentName:"p"},"E")," \u4ee3\u8868\u56fe\u4e2d\u8fb9\u7684\u6761\u6570\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"V")," \u4ee3\u8868\u56fe\u4e2d\u8282\u70b9\u7684\u4e2a\u6570\u3002"),(0,a.kt)("p",null,"\u56e0\u4e3a\u7406\u60f3\u60c5\u51b5\u4e0b\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u6700\u591a\u88c5 ",(0,a.kt)("inlineCode",{parentName:"p"},"V")," \u4e2a\u8282\u70b9\uff0c\u5bf9\u4f18\u5148\u7ea7\u961f\u5217\u7684\u64cd\u4f5c\u6b21\u6570\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"E")," \u6210\u6b63\u6bd4\uff0c\u6240\u4ee5\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"O(ElogV)"),"\u3002"),(0,a.kt)("p",null,"\u4e0d\u8fc7\u8fd9\u662f\u7406\u60f3\u60c5\u51b5\uff0cDijkstra \u7b97\u6cd5\u7684\u4ee3\u7801\u5b9e\u73b0\u6709\u5f88\u591a\u7248\u672c\uff0c\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u6216\u8005\u4e0d\u540c\u6570\u636e\u7ed3\u6784 API \u90fd\u4f1a\u5bfc\u81f4\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d1\u751f\u4e00\u4e9b\u6539\u53d8\u3002"),(0,a.kt)("p",null,"\u6bd4\u5982\u672c\u6587\u5b9e\u73b0\u7684 Dijkstra \u7b97\u6cd5\uff0c\u4f7f\u7528\u4e86 Java \u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"PriorityQueue")," \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u5bb9\u5668\u7c7b\u5e95\u5c42\u4f7f\u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\uff0c\u4f46\u6ca1\u6709\u63d0\u4f9b\u901a\u8fc7\u7d22\u5f15\u64cd\u4f5c\u961f\u5217\u4e2d\u5143\u7d20\u7684 API\uff0c\u6240\u4ee5\u961f\u5217\u4e2d\u4f1a\u6709\u91cd\u590d\u7684\u8282\u70b9\uff0c\u6700\u591a\u53ef\u80fd\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"E")," \u4e2a\u8282\u70b9\u5b58\u5728\u961f\u5217\u4e2d\u3002"),(0,a.kt)("p",null,"\u6240\u4ee5\u672c\u6587\u5b9e\u73b0\u7684 Dijkstra \u7b97\u6cd5\u590d\u6742\u5ea6\u5e76\u4e0d\u662f\u7406\u60f3\u60c5\u51b5\u4e0b\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"O(ElogV)"),"\uff0c\u800c\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"O(ElogE)"),"\uff0c\u53ef\u80fd\u4f1a\u7565\u5927\u4e00\u4e9b\uff0c\u56e0\u4e3a\u56fe\u4e2d\u8fb9\u7684\u6761\u6570\u4e00\u822c\u662f\u5927\u4e8e\u8282\u70b9\u7684\u4e2a\u6570\u7684\u3002"),(0,a.kt)("p",null,"\u4e0d\u8fc7\u5c31\u5bf9\u6570\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u7b97\u771f\u6570\u5927\u4e00\u4e9b\uff0c\u5bf9\u6570\u51fd\u6570\u7684\u7ed3\u679c\u4e5f\u5927\u4e0d\u4e86\u591a\u5c11\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u5b9e\u73b0\u7684\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u4e5f\u662f\u5f88\u9ad8\u7684\uff0c\u4ee5\u4e0a\u53ea\u662f\u7406\u8bba\u5c42\u9762\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002"),(0,a.kt)("h1",{id:"\u79d2\u6740\u4e09\u9053\u9898\u76ee"},"\u79d2\u6740\u4e09\u9053\u9898\u76ee"),(0,a.kt)("p",null,"\u4ee5\u4e0a\u8bf4\u4e86 Dijkstra \u7b97\u6cd5\u7684\u6846\u67b6\uff0c\u4e0b\u9762\u6211\u4eec\u5957\u7528\u8fd9\u4e2a\u6846\u67b6\u505a\u51e0\u9053\u9898\uff0c\u5b9e\u8df5\u51fa\u771f\u77e5\u3002"),(0,a.kt)("p",null,"\u7b2c\u4e00\u9898\u662f\u529b\u6263\u7b2c 743 \u9898\u300c\u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4\u300d\uff0c\u9898\u76ee\u5982\u4e0b\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2Fe55b32ccfa7310b164dd73d9836b0e1805056b15.jpg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// times \u8bb0\u5f55\u8fb9\u548c\u6743\u91cd\uff0cn \u4e3a\u8282\u70b9\u4e2a\u6570\uff08\u4ece 1 \u5f00\u59cb\uff09\uff0ck \u4e3a\u8d77\u70b9\n// \u8ba1\u7b97\u4ece k \u53d1\u51fa\u7684\u4fe1\u53f7\u81f3\u5c11\u9700\u8981\u591a\u4e45\u4f20\u904d\u6574\u5e45\u56fe\nint networkDelayTime(int[][] times, int n, int k)\n")),(0,a.kt)("p",null,"\u8ba9\u4f60\u6c42\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\u7684\u65f6\u95f4\uff0c\u4f60\u628a\u6240\u8c13\u7684\u4f20\u9012\u65f6\u95f4\u770b\u505a\u8ddd\u79bb\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u95ee\u4f60\u300c\u4ece\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," \u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e2d\uff0c\u6700\u957f\u7684\u90a3\u6761\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u662f\u591a\u5c11\u300d\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u8ba9\u4f60\u7b97\u4ece\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," \u51fa\u53d1\u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u662f\u6807\u51c6\u7684 Dijkstra \u7b97\u6cd5\u3002"),(0,a.kt)("p",null,"\u5728\u7528 Dijkstra \u4e4b\u524d\uff0c\u522b\u5fd8\u4e86\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\uff0c\u52a0\u6743\u6709\u5411\u56fe\uff0c\u6ca1\u6709\u8d1f\u6743\u91cd\u8fb9\uff0cOK\uff0c\u53ef\u4ee5\u7528 Dijkstra \u7b97\u6cd5\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u3002"),(0,a.kt)("p",null,"\u6839\u636e\u6211\u4eec\u4e4b\u524d Dijkstra \u7b97\u6cd5\u7684\u6846\u67b6\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e0b\u9762\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int networkDelayTime(int[][] times, int n, int k) {\n    // \u8282\u70b9\u7f16\u53f7\u662f\u4ece 1 \u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8981\u4e00\u4e2a\u5927\u5c0f\u4e3a n + 1 \u7684\u90bb\u63a5\u8868\n    List<int[]>[] graph = new LinkedList[n + 1];\n    for (int i = 1; i <= n; i++) {\n        graph[i] = new LinkedList<>();\n    }\n    // \u6784\u9020\u56fe\n    for (int[] edge : times) {\n        int from = edge[0];\n        int to = edge[1];\n        int weight = edge[2];\n        // from -> List<(to, weight)>\n        // \u90bb\u63a5\u8868\u5b58\u50a8\u56fe\u7ed3\u6784\uff0c\u540c\u65f6\u5b58\u50a8\u6743\u91cd\u4fe1\u606f\n        graph[from].add(new int[]{to, weight});\n    }\n    // \u542f\u52a8 dijkstra \u7b97\u6cd5\u8ba1\u7b97\u4ee5\u8282\u70b9 k \u4e3a\u8d77\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\n    int[] distTo = dijkstra(k, graph);\n\n\n    // \u627e\u5230\u6700\u957f\u7684\u90a3\u4e00\u6761\u6700\u77ed\u8def\u5f84\n    int res = 0;\n    for (int i = 1; i < distTo.length; i++) {\n        if (distTo[i] == Integer.MAX_VALUE) {\n            // \u6709\u8282\u70b9\u4e0d\u53ef\u8fbe\uff0c\u8fd4\u56de -1\n            return -1;\n        }\n        res = Math.max(res, distTo[i]);\n    }\n    return res;\n}\n\n\n// \u8f93\u5165\u4e00\u4e2a\u8d77\u70b9 start\uff0c\u8ba1\u7b97\u4ece start \u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint[] dijkstra(int start, List<int[]>[] graph) {}\n")),(0,a.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u9996\u5148\u5229\u7528\u9898\u76ee\u8f93\u5165\u7684\u6570\u636e\u8f6c\u5316\u6210\u90bb\u63a5\u8868\u8868\u793a\u4e00\u5e45\u56fe\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5957\u7528 Dijkstra \u7b97\u6cd5\u7684\u6846\u67b6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class State {\n    // \u56fe\u8282\u70b9\u7684 id\n    int id;\n    // \u4ece start \u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8ddd\u79bb\n    int distFromStart;\n\n\n    State(int id, int distFromStart) {\n        this.id = id;\n        this.distFromStart = distFromStart;\n    }\n}\n\n\n// \u8f93\u5165\u4e00\u4e2a\u8d77\u70b9 start\uff0c\u8ba1\u7b97\u4ece start \u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint[] dijkstra(int start, List<int[]>[] graph) {\n    // \u5b9a\u4e49\uff1adistTo[i] \u7684\u503c\u5c31\u662f\u8d77\u70b9 start \u5230\u8fbe\u8282\u70b9 i \u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd\n    int[] distTo = new int[graph.length];\n    Arrays.fill(distTo, Integer.MAX_VALUE);\n    // base case\uff0cstart \u5230 start \u7684\u6700\u77ed\u8ddd\u79bb\u5c31\u662f 0\n    distTo[start] = 0;\n\n\n    // \u4f18\u5148\u7ea7\u961f\u5217\uff0cdistFromStart \u8f83\u5c0f\u7684\u6392\u5728\u524d\u9762\n    Queue<State> pq = new PriorityQueue<>((a, b) -> {\n        return a.distFromStart - b.distFromStart;\n    });\n    // \u4ece\u8d77\u70b9 start \u5f00\u59cb\u8fdb\u884c BFS\n    pq.offer(new State(start, 0));\n\n\n    while (!pq.isEmpty()) {\n        State curState = pq.poll();\n        int curNodeID = curState.id;\n        int curDistFromStart = curState.distFromStart;\n\n\n        if (curDistFromStart > distTo[curNodeID]) {\n            continue;\n        }\n\n\n        // \u5c06 curNode \u7684\u76f8\u90bb\u8282\u70b9\u88c5\u5165\u961f\u5217\n        for (int[] neighbor : graph[curNodeID]) {\n            int nextNodeID = neighbor[0];\n            int distToNextNode = distTo[curNodeID] + neighbor[1];\n            // \u66f4\u65b0 dp table\n            if (distTo[nextNodeID] > distToNextNode) {\n                distTo[nextNodeID] = distToNextNode;\n                pq.offer(new State(nextNodeID, distToNextNode));\n            }\n        }\n    }\n    return distTo;\n}\n")),(0,a.kt)("p",null,"\u4f60\u5bf9\u6bd4\u4e4b\u524d\u8bf4\u7684\u4ee3\u7801\u6846\u67b6\uff0c\u53ea\u8981\u7a0d\u7a0d\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u76ee\u89e3\u51b3\u4e86\u3002"),(0,a.kt)("p",null,"\u611f\u89c9\u8fd9\u9053\u9898\u5b8c\u5168\u6ca1\u6709\u96be\u5ea6\uff0c\u4e0b\u9762\u6211\u4eec\u518d\u770b\u4e00\u9053\u9898\u76ee\uff0c\u529b\u6263\u7b2c 1631 \u9898\u300c\u6700\u5c0f\u4f53\u529b\u6d88\u8017\u8def\u5f84\u300d\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2F8053191938f671c7a93c584ab2b1e91204971322.jpg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u4f53\u529b\u6d88\u8017\nint minimumEffortPath(int[][] heights);\n")),(0,a.kt)("p",null,"\u6211\u4eec\u5e38\u89c1\u7684\u4e8c\u7ef4\u77e9\u9635\u9898\u76ee\uff0c\u5982\u679c\u8ba9\u4f60\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u6bd4\u8f83\u7b80\u5355\u7684\u9898\u4e00\u822c\u90fd\u4f1a\u9650\u5236\u4f60\u53ea\u80fd\u5411\u53f3\u6216\u5411\u4e0b\u8d70\uff0c\u4f46\u8fd9\u9053\u9898\u53ef\u6ca1\u6709\u9650\u5236\u54e6\uff0c\u4f60\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u968f\u4fbf\u8d70\uff0c\u53ea\u8981\u8def\u5f84\u7684\u300c\u4f53\u529b\u6d88\u8017\u300d\u6700\u5c0f\u5c31\u884c\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u628a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6bcf\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"(x, y)")," \u5750\u6807\u770b\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u4e0a\u4e0b\u5de6\u53f3\u5750\u6807\u5c31\u662f\u76f8\u90bb\u8282\u70b9\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u548c\u76f8\u90bb\u5750\u6807\u5bf9\u5e94\u7684\u503c\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u5c31\u662f\u9898\u76ee\u8bf4\u7684\u300c\u4f53\u529b\u6d88\u8017\u300d\uff0c\u4f60\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fb9\u7684\u6743\u91cd\u3002"),(0,a.kt)("p",null,"\u8fd9\u6837\u4e00\u60f3\uff0c\u662f\u4e0d\u662f\u5c31\u5728\u8ba9\u4f60\u4ee5\u5de6\u4e0a\u89d2\u5750\u6807\u4e3a\u8d77\u70b9\uff0c\u4ee5\u53f3\u4e0b\u89d2\u5750\u6807\u4e3a\u7ec8\u70b9\uff0c\u8ba1\u7b97\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff1fDijkstra \u7b97\u6cd5\u662f\u4e0d\u662f\u53ef\u4ee5\u505a\u5230\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u8d77\u70b9 start \u548c\u7ec8\u70b9 end\uff0c\u8ba1\u7b97\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint dijkstra(int start, int end, List<Integer>[] graph)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u53ea\u4e0d\u8fc7\uff0c\u8fd9\u9053\u9898\u4e2d\u8bc4\u5224\u4e00\u6761\u8def\u5f84\u662f\u957f\u8fd8\u662f\u77ed\u7684\u6807\u51c6\u4e0d\u518d\u662f\u8def\u5f84\u7ecf\u8fc7\u7684\u6743\u91cd\u603b\u548c\uff0c\u800c\u662f\u8def\u5f84\u7ecf\u8fc7\u7684\u6743\u91cd\u6700\u5927\u503c"),"\u3002"),(0,a.kt)("p",null,"\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u518d\u60f3\u4e00\u4e0b\u4f7f\u7528 Dijkstra \u7b97\u6cd5\u7684\u524d\u63d0\uff0c\u52a0\u6743\u6709\u5411\u56fe\uff0c\u6ca1\u6709\u8d1f\u6743\u91cd\u8fb9\uff0c\u6c42\u6700\u77ed\u8def\u5f84\uff0cOK\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c\u54b1\u4eec\u6765\u5957\u6846\u67b6\u3002"),(0,a.kt)("p",null,"\u4e8c\u7ef4\u77e9\u9635\u62bd\u8c61\u6210\u56fe\uff0c\u6211\u4eec\u5148\u5b9e\u73b0\u4e00\u4e0b\u56fe\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"adj")," \u65b9\u6cd5\uff0c\u4e4b\u540e\u7684\u4e3b\u8981\u903b\u8f91\u4f1a\u6e05\u6670\u4e00\u4e9b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u65b9\u5411\u6570\u7ec4\uff0c\u4e0a\u4e0b\u5de6\u53f3\u7684\u5750\u6807\u504f\u79fb\u91cf\nint[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n\n\n// \u8fd4\u56de\u5750\u6807 (x, y) \u7684\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u5750\u6807\nList<int[]> adj(int[][] matrix, int x, int y) {\n    int m = matrix.length, n = matrix[0].length;\n    // \u5b58\u50a8\u76f8\u90bb\u8282\u70b9\n    List<int[]> neighbors = new ArrayList<>();\n    for (int[] dir : dirs) {\n        int nx = x + dir[0];\n        int ny = y + dir[1];\n        if (nx >= m || nx < 0 || ny >= n || ny < 0) {\n            // \u7d22\u5f15\u8d8a\u754c\n            continue;\n        }\n        neighbors.add(new int[]{nx, ny});\n    }\n    return neighbors;\n}\n")),(0,a.kt)("p",null,"\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u73b0\u5728\u8ba4\u4e3a\u4e00\u4e2a\u4e8c\u7ef4\u5750\u6807 ",(0,a.kt)("inlineCode",{parentName:"p"},"(x, y)")," \u662f\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"State")," \u7c7b\u4e5f\u9700\u8981\u4fee\u6539\u4e00\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class State {\n    // \u77e9\u9635\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\n    int x, y;\n    // \u4ece\u8d77\u70b9 (0, 0) \u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6700\u5c0f\u4f53\u529b\u6d88\u8017\uff08\u8ddd\u79bb\uff09\n    int effortFromStart;\n\n\n    State(int x, int y, int effortFromStart) {\n        this.x = x;\n        this.y = y;\n        this.effortFromStart = effortFromStart;\n    }\n}\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u5957\u7528 Dijkstra \u7b97\u6cd5\u7684\u4ee3\u7801\u6a21\u677f\u4e86\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Dijkstra \u7b97\u6cd5\uff0c\u8ba1\u7b97 (0, 0) \u5230 (m - 1, n - 1) \u7684\u6700\u5c0f\u4f53\u529b\u6d88\u8017\nint minimumEffortPath(int[][] heights) {\n    int m = heights.length, n = heights[0].length;\n    // \u5b9a\u4e49\uff1a\u4ece (0, 0) \u5230 (i, j) \u7684\u6700\u5c0f\u4f53\u529b\u6d88\u8017\u662f effortTo[i][j]\n    int[][] effortTo = new int[m][n];\n    // dp table \u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\n    for (int i = 0; i < m; i++) {\n        Arrays.fill(effortTo[i], Integer.MAX_VALUE);\n    }\n    // base case\uff0c\u8d77\u70b9\u5230\u8d77\u70b9\u7684\u6700\u5c0f\u6d88\u8017\u5c31\u662f 0\n    effortTo[0][0] = 0;\n\n\n    // \u4f18\u5148\u7ea7\u961f\u5217\uff0ceffortFromStart \u8f83\u5c0f\u7684\u6392\u5728\u524d\u9762\n    Queue<State> pq = new PriorityQueue<>((a, b) -> {\n        return a.effortFromStart - b.effortFromStart;\n    });\n\n\n    // \u4ece\u8d77\u70b9 (0, 0) \u5f00\u59cb\u8fdb\u884c BFS\n    pq.offer(new State(0, 0, 0));\n\n\n    while (!pq.isEmpty()) {\n        State curState = pq.poll();\n        int curX = curState.x;\n        int curY = curState.y;\n        int curEffortFromStart = curState.effortFromStart;\n\n\n        // \u5230\u8fbe\u7ec8\u70b9\u63d0\u524d\u7ed3\u675f\n        if (curX == m - 1 && curY == n - 1) {\n            return curEffortFromStart;\n        }\n\n\n        if (curEffortFromStart > effortTo[curX][curY]) {\n            continue;\n        }\n        // \u5c06 (curX, curY) \u7684\u76f8\u90bb\u5750\u6807\u88c5\u5165\u961f\u5217\n        for (int[] neighbor : adj(heights, curX, curY)) {\n            int nextX = neighbor[0];\n            int nextY = neighbor[1];\n            // \u8ba1\u7b97\u4ece (curX, curY) \u8fbe\u5230 (nextX, nextY) \u7684\u6d88\u8017\n            int effortToNextNode = Math.max(\n                effortTo[curX][curY], \n                Math.abs(heights[curX][curY] - heights[nextX][nextY])\n            );\n            // \u66f4\u65b0 dp table\n            if (effortTo[nextX][nextY] > effortToNextNode) {\n                effortTo[nextX][nextY] = effortToNextNode;\n                pq.offer(new State(nextX, nextY, effortToNextNode));\n            }\n        }\n    }\n    // \u6b63\u5e38\u60c5\u51b5\u4e0d\u4f1a\u8fbe\u5230\u8fd9\u4e2a return\n    return -1;\n}\n")),(0,a.kt)("p",null,"\u4f60\u770b\uff0c\u7a0d\u5fae\u6539\u4e00\u6539\u4ee3\u7801\u6a21\u677f\uff0c\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002"),(0,a.kt)("p",null,"\u6700\u540e\u770b\u4e00\u9053\u9898\u5427\uff0c\u529b\u6263\u7b2c 1514 \u9898\u300c\u6982\u7387\u6700\u5927\u7684\u8def\u5f84\u300d\uff0c\u770b\u4e0b\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://gblobscdn.gitbook.com/assets%2F-MgaO_np8dKO0rzhRKXx%2Fsync%2Fa47f033206f92d986670834867a69b428ff6e461.jpg?alt=media",alt:"img"})),(0,a.kt)("p",null,"\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8f93\u5165\u4e00\u5e45\u65e0\u5411\u56fe\uff0c\u8fb9\u4e0a\u7684\u6743\u91cd\u4ee3\u8868\u6982\u7387\uff0c\u8fd4\u56de\u4ece start \u5230\u8fbe end \u6700\u5927\u7684\u6982\u7387\ndouble maxProbability(int n, int[][] edges, double[] succProb, int start, int end)\n")),(0,a.kt)("p",null,"\u6211\u8bf4\u8fd9\u9898\u4e00\u770b\u5c31\u662f Dijkstra \u7b97\u6cd5\uff0c\u4f46\u806a\u660e\u7684\u4f60\u80af\u5b9a\u4f1a\u53cd\u9a73\u6211\uff1a"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1\u3001\u8fd9\u9898\u7ed9\u7684\u662f\u65e0\u5411\u56fe\uff0c\u4e5f\u53ef\u4ee5\u7528 Dijkstra \u7b97\u6cd5\u5417"),"\uff1f"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2\u3001\u66f4\u91cd\u8981\u7684\u662f\uff0cDijkstra \u7b97\u6cd5\u8ba1\u7b97\u7684\u662f\u6700\u77ed\u8def\u5f84\uff0c\u8ba1\u7b97\u7684\u662f\u6700\u5c0f\u503c\uff0c\u8fd9\u9898\u8ba9\u4f60\u8ba1\u7b97\u6700\u5927\u6982\u7387\u662f\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u600e\u4e48\u53ef\u80fd\u7528 Dijkstra \u7b97\u6cd5\u5462"),"\uff1f"),(0,a.kt)("p",null,"\u95ee\u5f97\u597d\uff01"),(0,a.kt)("p",null,"\u9996\u5148\u5173\u4e8e\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c\u524d\u6587 ",(0,a.kt)("a",{parentName:"p",href:"https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-2/tu"},"\u56fe\u7b97\u6cd5\u57fa\u7840")," \u8bf4\u8fc7\uff0c\u65e0\u5411\u56fe\u672c\u8d28\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u662f\u300c\u53cc\u5411\u56fe\u300d\uff0c\u4ece\u800c\u8f6c\u5316\u6210\u6709\u5411\u56fe\u3002"),(0,a.kt)("p",null,"\u91cd\u70b9\u8bf4\u8bf4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u8fd9\u4e2a\u95ee\u9898\uff0c\u5176\u5b9e Dijkstra \u548c\u5f88\u591a\u6700\u4f18\u5316\u7b97\u6cd5\u4e00\u6837\uff0c\u8ba1\u7b97\u7684\u662f\u300c\u6700\u4f18\u503c\u300d\uff0c\u8fd9\u4e2a\u6700\u4f18\u503c\u53ef\u80fd\u662f\u6700\u5927\u503c\uff0c\u4e5f\u53ef\u80fd\u662f\u6700\u5c0f\u503c\u3002"),(0,a.kt)("p",null,"\u6807\u51c6 Dijkstra \u7b97\u6cd5\u662f\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\uff0c\u4f46\u4f60\u6709\u60f3\u8fc7\u4e3a\u4ec0\u4e48 Dijkstra \u7b97\u6cd5\u4e0d\u5141\u8bb8\u5b58\u5728\u8d1f\u6743\u91cd\u8fb9\u4e48\uff1f"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u56e0\u4e3a Dijkstra \u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u6b63\u786e\u6027\u4f9d\u8d56\u4e00\u4e2a\u524d\u63d0\uff1a\u8def\u5f84\u4e2d\u6bcf\u589e\u52a0\u4e00\u6761\u8fb9\uff0c\u8def\u5f84\u7684\u603b\u6743\u91cd\u5c31\u4f1a\u589e\u52a0"),"\u3002"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u524d\u63d0\u7684\u6570\u5b66\u8bc1\u660e\u5927\u5bb6\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u641c\u7d22\u4e00\u4e0b\uff0c\u6211\u8fd9\u91cc\u53ea\u8bf4\u7ed3\u8bba\uff0c\u5176\u5b9e\u4f60\u628a\u8fd9\u4e2a\u7ed3\u8bba\u53cd\u8fc7\u6765\u4e5f\u662f OK \u7684\uff1a"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u8ba1\u7b97\u6700\u957f\u8def\u5f84\uff0c\u8def\u5f84\u4e2d\u6bcf\u589e\u52a0\u4e00\u6761\u8fb9\uff0c\u8def\u5f84\u7684\u603b\u6743\u91cd\u5c31\u4f1a\u51cf\u5c11\uff0c\u8981\u662f\u80fd\u591f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u7528 Dijkstra \u7b97\u6cd5\u3002"),(0,a.kt)("p",null,"\u4f60\u770b\u8fd9\u9053\u9898\u662f\u4e0d\u662f\u7b26\u5408\u8fd9\u4e2a\u6761\u4ef6\uff1f\u8fb9\u548c\u8fb9\u4e4b\u95f4\u662f\u4e58\u6cd5\u5173\u7cfb\uff0c\u6bcf\u6761\u8fb9\u7684\u6982\u7387\u90fd\u662f\u5c0f\u4e8e 1 \u7684\uff0c\u6240\u4ee5\u80af\u5b9a\u4f1a\u8d8a\u4e58\u8d8a\u5c0f\u3002"),(0,a.kt)("p",null,"\u53ea\u4e0d\u8fc7\uff0c\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u8981\u628a\u4f18\u5148\u7ea7\u961f\u5217\u7684\u6392\u5e8f\u987a\u5e8f\u53cd\u8fc7\u6765\uff0c\u4e00\u4e9b if \u5927\u5c0f\u5224\u65ad\u4e5f\u8981\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u76f4\u63a5\u770b\u89e3\u6cd5\u4ee3\u7801\u5427\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n    List<double[]>[] graph = new LinkedList[n];\n    for (int i = 0; i < n; i++) {\n        graph[i] = new LinkedList<>();\n    }\n    // \u6784\u9020\u90bb\u63a5\u8868\u7ed3\u6784\u8868\u793a\u56fe\n    for (int i = 0; i < edges.length; i++) {\n        int from = edges[i][0];\n        int to = edges[i][1];\n        double weight = succProb[i];\n        // \u65e0\u5411\u56fe\u5c31\u662f\u53cc\u5411\u56fe\uff1b\u5148\u628a int \u7edf\u4e00\u8f6c\u6210 double\uff0c\u5f85\u4f1a\u518d\u8f6c\u56de\u6765\n        graph[from].add(new double[]{(double)to, weight});\n        graph[to].add(new double[]{(double)from, weight});\n    }\n\n\n    return dijkstra(start, end, graph);\n}\n\n\nclass State {\n    // \u56fe\u8282\u70b9\u7684 id\n    int id;\n    // \u4ece start \u8282\u70b9\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u7684\u6982\u7387\n    double probFromStart;\n\n\n    State(int id, double probFromStart) {\n        this.id = id;\n        this.probFromStart = probFromStart;\n    }\n}\n\n\ndouble dijkstra(int start, int end, List<double[]>[] graph) {\n    // \u5b9a\u4e49\uff1aprobTo[i] \u7684\u503c\u5c31\u662f\u8282\u70b9 start \u5230\u8fbe\u8282\u70b9 i \u7684\u6700\u5927\u6982\u7387\n    double[] probTo = new double[graph.length];\n    // dp table \u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u53d6\u4e0d\u5230\u7684\u6700\u5c0f\u503c\n    Arrays.fill(probTo, -1);\n    // base case\uff0cstart \u5230 start \u7684\u6982\u7387\u5c31\u662f 1\n    probTo[start] = 1;\n\n\n    // \u4f18\u5148\u7ea7\u961f\u5217\uff0cprobFromStart \u8f83\u5927\u7684\u6392\u5728\u524d\u9762\n    Queue<State> pq = new PriorityQueue<>((a, b) -> {\n        return Double.compare(b.probFromStart, a.probFromStart);\n    });\n    // \u4ece\u8d77\u70b9 start \u5f00\u59cb\u8fdb\u884c BFS\n    pq.offer(new State(start, 1));\n\n\n    while (!pq.isEmpty()) {\n        State curState = pq.poll();\n        int curNodeID = curState.id;\n        double curProbFromStart = curState.probFromStart;\n\n\n        // \u9047\u5230\u7ec8\u70b9\u63d0\u524d\u8fd4\u56de\n        if (curNodeID == end) {\n            return curProbFromStart;\n        }\n\n\n        if (curProbFromStart < probTo[curNodeID]) {\n            // \u5df2\u7ecf\u6709\u4e00\u6761\u6982\u7387\u66f4\u5927\u7684\u8def\u5f84\u5230\u8fbe curNode \u8282\u70b9\u4e86\n            continue;\n        }\n        // \u5c06 curNode \u7684\u76f8\u90bb\u8282\u70b9\u88c5\u5165\u961f\u5217\n        for (double[] neighbor : graph[curNodeID]) {\n            int nextNodeID = (int)neighbor[0];\n            // \u770b\u770b\u4ece curNode \u8fbe\u5230 nextNode \u7684\u6982\u7387\u662f\u5426\u4f1a\u66f4\u5927\n            double probToNextNode = probTo[curNodeID] * neighbor[1];\n            if (probTo[nextNodeID] < probToNextNode) {\n                probTo[nextNodeID] = probToNextNode;\n                pq.offer(new State(nextNodeID, probToNextNode));\n            }\n        }\n    }\n    // \u5982\u679c\u5230\u8fbe\u8fd9\u91cc\uff0c\u8bf4\u660e\u4ece start \u5f00\u59cb\u65e0\u6cd5\u5230\u8fbe end\uff0c\u8fd4\u56de 0\n    return 0.0;\n}\n")),(0,a.kt)("p",null,"\u597d\u4e86\uff0c\u5230\u8fd9\u91cc\u672c\u6587\u5c31\u7ed3\u675f\u4e86\uff0c\u603b\u5171 6000 \u591a\u5b57\uff0c\u8fd9\u4e09\u9053\u4f8b\u9898\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u5982\u679c\u4f60\u80fd\u591f\u770b\u5230\u8fd9\u91cc\uff0c\u771f\u5f97\u7ed9\u4f60\u9f13\u638c\u3002"),(0,a.kt)("p",null,"\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u505a\u9898\u5728\u8d28\u4e0d\u5728\u91cf\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u900f\u5f7b\u7406\u89e3\u6700\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4e0d\u53d8\u5e94\u4e07\u53d8\u3002"))}u.isMDXComponent=!0}}]);