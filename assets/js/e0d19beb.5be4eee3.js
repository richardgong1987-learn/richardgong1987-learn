"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[6699],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),s=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,c=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),d=s(t),m=i,j=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(j,o(o({ref:e},p),{},{components:t})):r.createElement(j,o({ref:e},p))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31025:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(83117),i=t(80102),a=(t(67294),t(3905)),o=["components"],l={},c="2.6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u7f16\u8f91\u8ddd\u79bb",s={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb",title:"2.6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u7f16\u8f91\u8ddd\u79bb",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u52a8\u6001\u89c4\u5212\u4e4b\u6b63\u5219\u8868\u8fbe",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u6b63\u5219\u8868\u8fbe"},next:{title:"2.16 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b50\u96c6\u80cc\u5305\u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6"}},p=[{value:"2.6.2 \u4ee3\u7801\u8be6\u89e3",id:"262-\u4ee3\u7801\u8be6\u89e3",children:[],level:3},{value:"2.6.4 \u6269\u5c55\u5ef6\u4f38",id:"264-\u6269\u5c55\u5ef6\u4f38",children:[],level:3}],u={toc:p};function d(n){var e=n.components,t=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"26-\u7ecf\u5178\u52a8\u6001\u89c4\u5212\u7f16\u8f91\u8ddd\u79bb"},"2.6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u7f16\u8f91\u8ddd\u79bb"),(0,a.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/edit-distance"},"72.\u7f16\u8f91\u8ddd\u79bb")),(0,a.kt)("p",null,"\u73b0\u5728\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"s1")," \u548c\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"s2"),"\uff0c\u8bf7\u4f60\u8ba1\u7b97\uff0c\u5c06\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"s1"),"\xa0\u8f6c\u6362\u6210\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"s2")," ",(0,a.kt)("strong",{parentName:"p"},"\u6700\u5c11"),"\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\uff0c\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def minDistance(s1: str, s2: str) -> int:\n")),(0,a.kt)("h3",{id:"262-\u4ee3\u7801\u8be6\u89e3"},"2.6.2 \u4ee3\u7801\u8be6\u89e3"),(0,a.kt)("p",null,"\u66b4\u529b\u9012\u5f52\u89e3\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def minDistance(s1, s2) -> int:\n    # dp \u51fd\u6570\u7684\u5b9a\u4e49\uff1a\n    # s1[0..i] \u548c s2[0..j] \u7684\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bb\u662f dp(i, j)\n    def dp(i, j) -> int:\n        # base case\n        if i == -1: return j + 1\n        if j == -1: return i + 1\n        # \u505a\u9009\u62e9\n        if s1[i] == s2[j]:\n            return dp(i - 1, j - 1)  # \u5565\u90fd\u4e0d\u505a\n        else:\n            return min(\n                dp(i, j - 1) + 1,    # \u63d2\u5165\n                dp(i - 1, j) + 1,    # \u5220\u9664\n                dp(i - 1, j - 1) + 1 # \u66ff\u6362\n            )\n    \n    # i\uff0cj \u521d\u59cb\u5316\u6307\u5411\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\n    return dp(len(s1) - 1, len(s2) - 1)\n")),(0,a.kt)("p",null,"\u5907\u5fd8\u5f55\u4f18\u5316\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def minDistance(s1, s2) -> int:\n\n    memo = dict() # \u5907\u5fd8\u5f55\n    def dp(i, j):\n        # \u5148\u67e5\u5907\u5fd8\u5f55\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\n        if (i, j) in memo: \n            return memo[(i, j)]\n        # base case\n        if i == -1: return j + 1\n        if j == -1: return i + 1\n        \n        if s1[i] == s2[j]:\n            memo[(i, j)] = dp(i - 1, j - 1)\n        else:\n            memo[(i, j)] = min(\n                dp(i, j - 1) + 1,    # \u63d2\u5165\n                dp(i - 1, j) + 1,    # \u5220\u9664\n                dp(i - 1, j - 1) + 1 # \u66ff\u6362\n            )\n        return memo[(i, j)]\n    \n    return dp(len(s1) - 1, len(s2) - 1)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dp")," \u6570\u7ec4\u7684\u8fed\u4ee3\u89e3\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int minDistance(String s1, String s2) {\n    int m = s1.length(), n = s2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    // base case \n    for (int i = 1; i <= m; i++)\n        dp[i][0] = i;\n    for (int j = 1; j <= n; j++)\n        dp[0][j] = j;\n    // \u81ea\u5e95\u5411\u4e0a\u6c42\u89e3\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            if (s1.charAt(i-1) == s2.charAt(j-1))\n                dp[i][j] = dp[i - 1][j - 1];\n            else               \n                dp[i][j] = min(\n                    dp[i - 1][j] + 1,\n                    dp[i][j - 1] + 1,\n                    dp[i-1][j-1] + 1\n                );\n    // \u50a8\u5b58\u7740\u6574\u4e2a s1 \u548c s2 \u7684\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bb\n    return dp[m][n];\n}\n\nint min(int a, int b, int c) {\n    return Math.min(a, Math.min(b, c));\n}\n")),(0,a.kt)("h3",{id:"264-\u6269\u5c55\u5ef6\u4f38"},"2.6.4 \u6269\u5c55\u5ef6\u4f38"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/*\nval \u8bb0\u5f55\u5230\u5f53\u524d\u7684\u64cd\u4f5c\u6b21\u6570\uff1b\nchoice \u8bb0\u5f55\u8fd9\u4e00\u6b21\u7684\u9009\u62e9\u662f\u4ec0\u4e48\uff0c\u5176\u4e2d\uff1a\n    0 \u4ee3\u8868\u5565\u90fd\u4e0d\u505a\n    1 \u4ee3\u8868\u63d2\u5165\n    2 \u4ee3\u8868\u5220\u9664\n    3 \u4ee3\u8868\u66ff\u6362\n*/\nclass Node {\n    int val;\n    int choice;\n    Node(int val, int choice) { \n        this.val = val;\n        this.choice = choice;\n    }\n}\n")),(0,a.kt)("p",null,"\u7136\u540e\uff0c\u7a0d\u5fae\u4fee\u6539\u6211\u4eec\u521a\u624d\u7684\u89e3\u6cd5\u4ee3\u7801\uff0c\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"int[][] dp")," \u5347\u7ea7\u6210 ",(0,a.kt)("inlineCode",{parentName:"p"},"Node[][] dp"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/*\nval \u8bb0\u5f55\u5230\u5f53\u524d\u7684\u64cd\u4f5c\u6b21\u6570\uff1b\nchoice \u8bb0\u5f55\u8fd9\u4e00\u6b21\u7684\u9009\u62e9\u662f\u4ec0\u4e48\uff0c\u5176\u4e2d\uff1a\n    0 \u4ee3\u8868\u5565\u90fd\u4e0d\u505a\n    1 \u4ee3\u8868\u63d2\u5165\n    2 \u4ee3\u8868\u5220\u9664\n    3 \u4ee3\u8868\u66ff\u6362\n*/\nclass Node {\n    int val;\n    int choice;\n    Node(int val, int choice) { \n        this.val = val;\n        this.choice = choice;\n    }\n}\n\n\nint minDistance(String s1, String s2) {\n    int m = s1.length(), n = s2.length();\n    Node[][] dp = new Node[m + 1][n + 1];\n    // base case\n    for (int i = 0; i <= m; i++) {\n        // s1 \u8f6c\u5316\u6210 s2 \u53ea\u9700\u8981\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\n        dp[i][0] = new Node(i, 2);\n    }\n    for (int j = 1; j <= n; j++) {\n        // s1 \u8f6c\u5316\u6210 s2 \u53ea\u9700\u8981\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\n        dp[0][j] = new Node(j, 1);\n    }\n    // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            if (s1.charAt(i-1) == s2.charAt(j-1)){\n                // \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u9700\u8981\u505a\n                Node node = dp[i - 1][j - 1];\n                dp[i][j] = new Node(node.val, 0);\n            } else {\n                // \u5426\u5219\uff0c\u8bb0\u5f55\u4ee3\u4ef7\u6700\u5c0f\u7684\u64cd\u4f5c\n                dp[i][j] = minNode(\n                    dp[i - 1][j],\n                    dp[i][j - 1],\n                    dp[i-1][j-1]\n                );\n                // \u5e76\u4e14\u5c06\u7f16\u8f91\u8ddd\u79bb\u52a0\u4e00\n                dp[i][j].val++;\n            }\n    // \u6839\u636e dp table \u53cd\u63a8\u5177\u4f53\u64cd\u4f5c\u8fc7\u7a0b\u5e76\u6253\u5370\n    printResult(dp, s1, s2);\n    return dp[m][n].val;\n}\n")),(0,a.kt)("p",null,"\u5176\u4e2d\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"minNode")," \u65b9\u6cd5\u662f\u6211\u4eec\u81ea\u5df1\u5199\u7684\uff0c\u8fd4\u56de\u4e09\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," \u4e2d ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," \u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u5e76\u8bb0\u5f55\u5176 ",(0,a.kt)("inlineCode",{parentName:"p"},"choice"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \u8ba1\u7b97 delete, insert, replace \u4e2d\u4ee3\u4ef7\u6700\u5c0f\u7684\u64cd\u4f5c\nNode minNode(Node a, Node b, Node c) {\n    Node res = new Node(a.val, 2);\n    \n    if (res.val > b.val) {\n        res.val = b.val;\n        res.choice = 1;\n    }\n    if (res.val > c.val) {\n        res.val = c.val;\n        res.choice = 3;\n    }\n    return res;\n}\n")),(0,a.kt)("p",null,"\u6700\u540e\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"printResult")," \u51fd\u6570\u53cd\u63a8\u7ed3\u679c\u5e76\u628a\u5177\u4f53\u7684\u64cd\u4f5c\u6253\u5370\u51fa\u6765\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'void printResult(Node[][] dp, String s1, String s2) {\n    int rows = dp.length;\n    int cols = dp[0].length;\n    int i = rows - 1, j = cols - 1;\n    System.out.println("Change s1=" + s1 + " to s2=" + s2 + ":\\n");\n    while (i != 0 && j != 0) {\n        char c1 = s1.charAt(i - 1);\n        char c2 = s2.charAt(j - 1);\n        int choice = dp[i][j].choice;\n        System.out.print("s1[" + (i - 1) + "]:");\n        switch (choice) {\n            case 0:\n                // \u8df3\u8fc7\uff0c\u5219\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u524d\u8fdb\n                System.out.println("skip \'" + c1 + "\'");\n                i--; j--;\n                break;\n            case 1:\n                // \u5c06 s2[j] \u63d2\u5165 s1[i]\uff0c\u5219 s2 \u6307\u9488\u524d\u8fdb\n                System.out.println("insert \'" + c2 + "\'");\n                j--;\n                break;\n            case 2:\n                // \u5c06 s1[i] \u5220\u9664\uff0c\u5219 s1 \u6307\u9488\u524d\u8fdb\n                System.out.println("delete \'" + c1 + "\'");\n                i--;\n                break;\n            case 3:\n                // \u5c06 s1[i] \u66ff\u6362\u6210 s2[j]\uff0c\u5219\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u524d\u8fdb\n                System.out.println(\n                    "replace \'" + c1 + "\'" + " with \'" + c2 + "\'");\n                i--; j--;\n                break;\n        }\n    }\n    // \u5982\u679c s1 \u8fd8\u6ca1\u6709\u8d70\u5b8c\uff0c\u5219\u5269\u4e0b\u7684\u90fd\u662f\u9700\u8981\u5220\u9664\u7684\n    while (i > 0) {\n        System.out.print("s1[" + (i - 1) + "]:");\n        System.out.println("delete \'" + s1.charAt(i - 1) + "\'");\n        i--;\n    }\n    // \u5982\u679c s2 \u8fd8\u6ca1\u6709\u8d70\u5b8c\uff0c\u5219\u5269\u4e0b\u7684\u90fd\u662f\u9700\u8981\u63d2\u5165 s1 \u7684\n    while (j > 0) {\n        System.out.print("s1[0]:");\n        System.out.println("insert \'" + s2.charAt(j - 1) + "\'");\n        j--;\n    }\n}\n')))}d.isMDXComponent=!0}}]);