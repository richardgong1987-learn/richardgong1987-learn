(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[7394],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return s},kt:function(){return d}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,c=n.parentName,s=i(n,["components","mdxType","originalType","parentName"]),m=l(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,u(u({ref:e},s),{},{components:t})):r.createElement(f,u({ref:e},s))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,u=new Array(a);u[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:o,u[1]=i;for(var l=2;l<a;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},51758:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var r=t(22122),o=t(19756),a=(t(67294),t(3905)),u=["components"],i={},c="2.16 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b50\u96c6\u80cc\u5305\u95ee\u9898",l={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6",isDocsHomePage:!1,title:"2.16 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b50\u96c6\u80cc\u5305\u95ee\u9898",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u5b50\u96c6.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u7f16\u8f91\u8ddd\u79bb",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u7f16\u8f91\u8ddd\u79bb"},next:{title:"2.15 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a0-1 \u80cc\u5305\u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u52a8\u6001\u89c4\u5212\u7cfb\u5217/\u80cc\u5305\u95ee\u9898"}},s=[{value:"2.16.1 \u95ee\u9898\u5206\u6790",id:"2161-\u95ee\u9898\u5206\u6790",children:[]},{value:"2.16.2 \u89e3\u6cd5\u5206\u6790",id:"2162-\u89e3\u6cd5\u5206\u6790",children:[]},{value:"2.16.3 \u8fdb\u884c\u72b6\u6001\u538b\u7f29",id:"2163-\u8fdb\u884c\u72b6\u6001\u538b\u7f29",children:[]}],p={toc:s};function m(n){var e=n.components,t=(0,o.Z)(n,u);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"216-\u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b50\u96c6\u80cc\u5305\u95ee\u9898"},"2.16 \u7ecf\u5178\u52a8\u6001\u89c4\u5212\uff1a\u5b50\u96c6\u80cc\u5305\u95ee\u9898"),(0,a.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/partition-equal-subset-sum"},"416.\u5206\u5272\u7b49\u548c\u5b50\u96c6")),(0,a.kt)("h3",{id:"2161-\u95ee\u9898\u5206\u6790"},"2.16.1 \u95ee\u9898\u5206\u6790"),(0,a.kt)("p",null,"\u7b97\u6cd5\u7684\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u8f93\u5165\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd4\u56de\u662f\u5426\u80fd\u591f\u5206\u5272\u6210\u548c\u76f8\u7b49\u7684\u4e24\u4e2a\u5b50\u96c6\nbool canPartition(vector<int>& nums);\n")),(0,a.kt)("h3",{id:"2162-\u89e3\u6cd5\u5206\u6790"},"2.16.2 \u89e3\u6cd5\u5206\u6790"),(0,a.kt)("p",null,"\u4ee5\u4e0b\u662f\u6211\u7684 C++ \u4ee3\u7801\uff0c\u5b8c\u5168\u7ffb\u8bd1\u4e86\u4e4b\u524d\u7684\u601d\u8def\uff0c\u5e76\u5904\u7406\u4e86\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool canPartition(vector<int>& nums) {\n    int sum = 0;\n    for (int num : nums) sum += num;\n    // \u548c\u4e3a\u5947\u6570\u65f6\uff0c\u4e0d\u53ef\u80fd\u5212\u5206\u6210\u4e24\u4e2a\u548c\u76f8\u7b49\u7684\u96c6\u5408\n    if (sum % 2 != 0) return false;\n    int n = nums.size();\n    sum = sum / 2;\n    // \u6784\u5efa dp \u6570\u7ec4\n    vector<vector<bool>> \n        dp(n + 1, vector<bool>(sum + 1, false));\n    // base case\n    for (int i = 0; i <= n; i++)\n        dp[i][0] = true;\n    // \u5f00\u59cb\u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j - nums[i - 1] < 0) {\n               // \u80cc\u5305\u5bb9\u91cf\u4e0d\u8db3\uff0c\u80af\u5b9a\u4e0d\u80fd\u88c5\u5165\u7b2c i \u4e2a\u7269\u54c1\n                dp[i][j] = dp[i - 1][j]; \n            } else {\n                // \u88c5\u5165\u6216\u4e0d\u88c5\u5165\u80cc\u5305\n                // \u770b\u770b\u662f\u5426\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\u80fd\u591f\u6070\u597d\u88c5\u6ee1\n                dp[i][j] = dp[i - 1][j] || dp[i - 1][j-nums[i-1]];\n            }\n        }\n    }\n    return dp[n][sum];\n}\n")),(0,a.kt)("h3",{id:"2163-\u8fdb\u884c\u72b6\u6001\u538b\u7f29"},"2.16.3 \u8fdb\u884c\u72b6\u6001\u538b\u7f29"),(0,a.kt)("p",null,"\u72b6\u6001\u538b\u7f29\uff0c\u5c06\u4e8c\u7ef4 ",(0,a.kt)("inlineCode",{parentName:"p"},"dp")," \u6570\u7ec4\u538b\u7f29\u4e3a\u4e00\u7ef4\uff0c\u8282\u7ea6\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool canPartition(vector<int>& nums) {\n    int sum = 0, n = nums.size();\n    for (int num : nums) sum += num;\n    if (sum % 2 != 0) return false;\n    sum = sum / 2;\n    vector<bool> dp(sum + 1, false);\n    // base case\n    dp[0] = true;\n\n    for (int i = 0; i < n; i++) \n        for (int j = sum; j >= 0; j--) \n            if (j - nums[i] >= 0) \n                dp[j] = dp[j] || dp[j - nums[i]];\n\n    return dp[sum];\n}\n")))}m.isMDXComponent=!0}}]);