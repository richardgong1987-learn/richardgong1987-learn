"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[3098],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),o=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=o(e.components);return i.createElement(u.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),m=o(t),g=r,c=m["".concat(u,".").concat(g)]||m[g]||p[g]||s;return t?i.createElement(c,l(l({ref:n},d),{},{components:t})):i.createElement(c,l({ref:n},d))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=g;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a[m]="string"==typeof e?e:r,l[1]=a;for(var o=2;o<s;o++)l[o]=t[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},14978:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return o}});var i=t(83117),r=(t(67294),t(3905));const s={},l="\u7b2c\u5341\u4e09\u7ae0\uff1a\u56de\u6eaf\u6cd5",a={unversionedId:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13",id:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13",title:"\u7b2c\u5341\u4e09\u7ae0\uff1a\u56de\u6eaf\u6cd5",description:"\u9762\u8bd5\u989879\uff1a\u6240\u6709\u5b50\u96c6",source:"@site/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13.md",sourceDirName:"c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main",slug:"/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13",draft:!1,editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter13.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7b2c\u5341\u4e8c\u7ae0\uff1a\u6392\u5e8f",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter12"},next:{title:"\u7b2c\u5341\u56db\u7ae0\uff1a\u52a8\u6001\u89c4\u5212",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/OfferOrientedAlgorithms-main/Chapter14"}},u={},o=[{value:"\u9762\u8bd5\u989879\uff1a\u6240\u6709\u5b50\u96c6",id:"\u9762\u8bd5\u989879\u6240\u6709\u5b50\u96c6",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801",level:3},{value:"\u9762\u8bd5\u989880\uff1a\u542b\u6709k\u4e2a\u5143\u7d20\u7684\u7ec4\u5408",id:"\u9762\u8bd5\u989880\u542b\u6709k\u4e2a\u5143\u7d20\u7684\u7ec4\u5408",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-1",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-1",level:3},{value:"\u9762\u8bd5\u989881\uff1a\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\u7684\u7ec4\u5408",id:"\u9762\u8bd5\u989881\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\u7684\u7ec4\u5408",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-2",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-2",level:3},{value:"\u9762\u8bd5\u989882\uff1a\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u7ec4\u5408",id:"\u9762\u8bd5\u989882\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u7ec4\u5408",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-3",level:2},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-3",level:3},{value:"\u9762\u8bd5\u989883\uff1a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",id:"\u9762\u8bd5\u989883\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-4",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-4",level:3},{value:"\u9762\u8bd5\u989884\uff1a\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",id:"\u9762\u8bd5\u989884\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-5",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-5",level:3},{value:"\u9762\u8bd5\u989885\uff1a\u751f\u6210\u5339\u914d\u7684\u62ec\u53f7",id:"\u9762\u8bd5\u989885\u751f\u6210\u5339\u914d\u7684\u62ec\u53f7",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-6",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-6",level:3},{value:"\u9762\u8bd5\u989886\uff1a\u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32",id:"\u9762\u8bd5\u989886\u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-7",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-7",level:3},{value:"\u9762\u8bd5\u989887\uff1a\u6062\u590dIP",id:"\u9762\u8bd5\u989887\u6062\u590dip",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-8",level:3},{value:"\u53c2\u8003\u4ee3\u7801",id:"\u53c2\u8003\u4ee3\u7801-8",level:3}],d={toc:o};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u7b2c\u5341\u4e09\u7ae0\u56de\u6eaf\u6cd5"},"\u7b2c\u5341\u4e09\u7ae0\uff1a\u56de\u6eaf\u6cd5"),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989879\u6240\u6709\u5b50\u96c6"},"\u9762\u8bd5\u989879\uff1a\u6240\u6709\u5b50\u96c6"),(0,r.kt)("h3",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u8f93\u5165\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u6570\u636e\u96c6\u5408\uff0c\u8bf7\u627e\u51fa\u5b83\u7684\u6240\u6709\u5b50\u96c6\u3002\u4f8b\u5982\u6570\u636e\u96c6\u5408","[1, 2]","\u67094\u4e2a\u5b50\u96c6\uff0c\u5206\u522b\u662f[]\u3001","[1]","\u3001","[2]","\u548c","[1, 2]","\u3002 "),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new LinkedList<>();\n    if (nums.length == 0) {\n        return result;\n    }\n\n    helper(nums, 0, new LinkedList<Integer>(), result);        \n    return result;\n}\n\nprivate void helper(int[] nums, int index, \n    LinkedList<Integer> subset, List<List<Integer>> result) {\n    if (index == nums.length) {\n        result.add(new LinkedList<>(subset));\n    } else if (index < nums.length) {\n        helper(nums, index + 1, subset, result);\n\n        subset.add(nums[index]);\n        helper(nums, index + 1, subset, result);\n        subset.removeLast();\n    }\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989880\u542b\u6709k\u4e2a\u5143\u7d20\u7684\u7ec4\u5408"},"\u9762\u8bd5\u989880\uff1a\u542b\u6709k\u4e2a\u5143\u7d20\u7684\u7ec4\u5408"),(0,r.kt)("h3",{id:"\u9898\u76ee-1"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u8f93\u5165n\u548ck\uff0c\u8bf7\u8f93\u51fa\u4ece1\u5230n\u91cc\u9009\u53d6k\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u6240\u6709\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u5982\u679cn\u7b49\u4e8e3\uff0ck\u7b49\u4e8e2\uff0c\u5c06\u7ec4\u62103\u4e2a\u7ec4\u5408\uff0c\u5206\u522b\u65f6","[1, 2]","\u3001","[1, 3]","\u548c","[2, 3]","\u3002 "),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-1"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> combine(int n, int k) {\n    List<List<Integer>> result = new LinkedList<>();\n    LinkedList<Integer> combination = new LinkedList<>();\n    helper(n, k, 1, combination, result);\n\n    return result;\n}\n\nprivate void helper(int n, int k, int i,\n    LinkedList<Integer> combination, List<List<Integer>> result) {\n    if (combination.size() == k) {\n        result.add(new LinkedList<>(combination));\n    } else if (i <= n) {\n        helper(n, k, i + 1, combination, result);\n\n        combination.add(i);\n        helper(n, k, i + 1, combination, result);\n        combination.removeLast();\n    }\n}   \n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989881\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\u7684\u7ec4\u5408"},"\u9762\u8bd5\u989881\uff1a\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\u7684\u7ec4\u5408"),(0,r.kt)("h3",{id:"\u9898\u76ee-2"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u6b63\u6574\u6570\u96c6\u5408\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u5143\u7d20\u4e4b\u548c\u7b49\u4e8e\u67d0\u4e2a\u7ed9\u5b9a\u503c\u7684\u6240\u6709\u7ec4\u5408\u3002\u540c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5728\u7ec4\u5408\u4e2d\u51fa\u73b0\u4efb\u610f\u6b21\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u6574\u6570\u96c6\u5408","[2, 3, 5]","\uff0c\u5143\u7d20\u4e4b\u548c\u7b49\u4e8e8\u7684\u7ec4\u5408\u6709\u4e09\u4e2a\uff0c\u5206\u522b\u662f","[2, 2, 2, 2]","\u3001","[2, 3, 3]","\u548c","[3, 5]","\u3002"),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-2"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> combinationSum(int[] nums, int target) {\n    List<List<Integer>> result = new LinkedList<>();\n    LinkedList<Integer> combination = new LinkedList<>();\n    helper(nums, target, 0, combination, result);\n\n    return result;\n}\n\nprivate void helper(int[] nums, int target, int i,\n    LinkedList<Integer> combination, List<List<Integer>> result) {\n    if (target == 0) {\n        result.add(new LinkedList<>(combination));\n    } else if (target > 0 && i < nums.length) {\n        helper(nums, target, i + 1, combination, result);\n\n        combination.add(nums[i]);            \n        helper(nums, target - nums[i], i, combination, result);\n        combination.removeLast();\n    }\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989882\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u7ec4\u5408"},"\u9762\u8bd5\u989882\uff1a\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u7ec4\u5408"),(0,r.kt)("h2",{id:"\u9898\u76ee-3"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u53ef\u80fd\u6709\u91cd\u590d\u6570\u5b57\u7684\u6574\u6570\u96c6\u5408\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u5143\u7d20\u4e4b\u548c\u7b49\u4e8e\u67d0\u4e2a\u7ed9\u5b9a\u503c\u7684\u6240\u6709\u7ec4\u5408\u3002\u8f93\u51fa\u91cc\u4e0d\u5f97\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u6574\u6570\u96c6\u5408","[2, 2, 2, 4, 3, 3]","\uff0c\u5143\u7d20\u4e4b\u548c\u7b49\u4e8e8\u7684\u7ec4\u5408\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f","[2, 2, 4]","\u548c","[2, 3, 3]","\u3002"),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-3"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> combinationSum2(int[] nums, int target) {\n    Arrays.sort(nums);\n\n    List<List<Integer>> result = new LinkedList<>();\n    LinkedList<Integer> combination = new LinkedList<>();\n    helper(nums, target, 0, combination, result);\n    return result;\n}\n\nprivate void helper(int[] nums, int target, int i,\n    LinkedList<Integer> combination, List<List<Integer>> result) {\n    if (target == 0) {\n        result.add(new LinkedList<>(combination));\n    } else if (target > 0 && i < nums.length) {\n        helper(nums, target, getNext(nums, i), combination, result);\n\n        combination.addLast(nums[i]);\n        helper(nums, target - nums[i], i + 1, combination, result);\n        combination.removeLast();\n    }\n}\n\nprivate int getNext(int[] nums, int index) {\n    int next = index;\n    while (next < nums.length && nums[next] == nums[index]) {\n        next++;\n    }\n\n    return next;\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989883\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217"},"\u9762\u8bd5\u989883\uff1a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217"),(0,r.kt)("h3",{id:"\u9898\u76ee-4"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u96c6\u5408\uff0c\u8bf7\u627e\u51fa\u5b83\u7684\u6240\u6709\u5168\u6392\u5217\u3002\u4f8b\u5982\u96c6\u5408","[1, 2, 3]","\u67096\u4e2a\u5168\u6392\u5217\uff0c\u5206\u522b\u662f","[1, 2, 3]","\u3001","[1, 3, 2]","\u3001","[2, 1, 3]","\u3001","[2, 3, 1]","\u3001","[3, 1, 2]","\u548c","[3, 2, 1]","\u3002"),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-4"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> result = new LinkedList<>();\n    helper(nums, 0, result);\n    return result;\n}\n\npublic void helper(int[] nums, int i, List<List<Integer>> result) {\n    if (i == nums.length) {\n        List<Integer> permutation = new LinkedList<>();\n        for (int num : nums) {\n            permutation.add(num);\n        }\n\n        result.add(permutation);\n    } else {\n        for (int j = i; j < nums.length; ++j) {\n            swap(nums, i, j);\n            helper(nums, i + 1, result);\n            swap(nums, i, j);\n        }\n    }\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    if (i != j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989884\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217"},"\u9762\u8bd5\u989884\uff1a\u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217"),(0,r.kt)("h3",{id:"\u9898\u76ee-5"},"\u9898\u76ee"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6709\u91cd\u590d\u6570\u5b57\u7684\u96c6\u5408\uff0c\u8bf7\u627e\u51fa\u5b83\u7684\u6240\u6709\u5168\u6392\u5217\u3002\u4f8b\u5982\u96c6\u5408","[1, 1, 2]","\u67093\u4e2a\u5168\u6392\u5217\uff0c\u5206\u522b\u662f","[1, 1, 2]","\u3001","[1, 2, 1]","\u548c","[2, 1, 1]","\u3002"),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-5"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> permuteUnique(int[] nums) {\n    List<List<Integer>> result = new ArrayList<List<Integer>>();\n    helper(nums, 0, result);\n    return result;\n}\n\nprivate void helper(int[] nums, int i, List<List<Integer>> result) {\n    if (i == nums.length) {\n        List<Integer> permutation = new ArrayList<Integer>();\n        for (int num : nums) {\n            permutation.add(num);\n        }\n\n        result.add(permutation);\n    } else {\n        Set<Integer> set = new HashSet<>();\n        for (int j = i; j < nums.length; ++j) {\n            if (!set.contains(nums[j])) {\n                set.add(nums[j]);\n\n                swap(nums, i, j);\n                helper(nums, i + 1, result);\n                swap(nums, i, j);\n            }\n        }\n    }\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    if (i != j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989885\u751f\u6210\u5339\u914d\u7684\u62ec\u53f7"},"\u9762\u8bd5\u989885\uff1a\u751f\u6210\u5339\u914d\u7684\u62ec\u53f7"),(0,r.kt)("h3",{id:"\u9898\u76ee-6"},"\u9898\u76ee"),(0,r.kt)("p",null,'\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8bf7\u8f93\u51fa\u6240\u6709\u5305\u542bn\u4e2a\u5de6\u62ec\u53f7\u548cn\u4e2a\u53f3\u62ec\u53f7\u7684\u7ec4\u5408\uff0c\u8981\u6c42\u6bcf\u4e2a\u7ec4\u5408\u7684\u5de6\u53f3\u62ec\u53f7\u5339\u914d\u3002\u4f8b\u5982\uff0c\u5f53n\u7b49\u4e8e2\u65f6\uff0c\u67092\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u62ec\u53f7\u7ec4\u5408\uff0c\u5206\u522b\u662f"(())"\u548c"()()"\u3002'),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-6"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public List<String> generateParenthesis(int n) {\n    List<String> result = new LinkedList<>();\n    helper(n, n, "", result);\n    return result;\n}\n\nprivate void helper(int left, int right, \n    String parenthesis, List<String> result) {\n    if (left == 0 && right == 0) {\n        result.add(parenthesis);\n        return;\n    }\n\n    if (left > 0) {\n        helper(left - 1, right, parenthesis + "(", result);\n    }\n\n    if (left < right) {\n        helper(left, right - 1, parenthesis + ")", result);\n    }\n}\n')),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989886\u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32"},"\u9762\u8bd5\u989886\uff1a\u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32"),(0,r.kt)("h3",{id:"\u9898\u76ee-7"},"\u9898\u76ee"),(0,r.kt)("p",null,'\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6c42\u5c06\u5b83\u5206\u5272\u6210\u82e5\u5e72\u5b50\u5b57\u7b26\u4e32\u4f7f\u5f97\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u90fd\u662f\u56de\u6587\u3002\u8bf7\u5217\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u8f93\u5165"google"\uff0c\u5c06\u8f93\u51fa3\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u5206\u5272\u65b9\u6cd5\uff0c\u5206\u522b\u662f','["g", "o", "o", "g", "l", "e"]',"\u3001",'["g", "oo", "g", "l", "e"]',"\u548c",'["goog", "l", "e"]',"\u3002"),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-7"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<String>> partition(String s) {\n    List<List<String>> result = new LinkedList<>();\n    helper(s, 0, new LinkedList<>(), result);\n\n    return result;\n}\n\nprivate void helper(String str, int start,\n    LinkedList<String> substrings, List<List<String>> result) {\n    if (start == str.length()) {\n        result.add(new LinkedList<>(substrings));\n        return;\n    }\n\n    for (int i = start; i < str.length(); ++i) {\n        if (isPalindrome(str, start, i)) {\n            substrings.add(str.substring(start, i + 1));\n            helper(str, i + 1, substrings, result);\n            substrings.removeLast();\n        }\n    }\n}\n\nprivate boolean isPalindrome(String str, int start, int end) {\n    while (start < end) {\n        if (str.charAt(start++) != str.charAt(end--)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n")),(0,r.kt)("h2",{id:"\u9762\u8bd5\u989887\u6062\u590dip"},"\u9762\u8bd5\u989887\uff1a\u6062\u590dIP"),(0,r.kt)("h3",{id:"\u9898\u76ee-8"},"\u9898\u76ee"),(0,r.kt)("p",null,'\u8f93\u5165\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u5217\u51fa\u6240\u6709\u53ef\u80fd\u6062\u590d\u51fa\u6765\u7684IP\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u5b57\u7b26\u4e32"10203040"\uff0c\u53ef\u80fd\u6062\u590d\u51fa3\u4e2aIP\uff0c\u5206\u522b\u4e3a"10.20.30.40"\uff0c"102.0.30.40"\u548c"10.203.0.40"\u3002'),(0,r.kt)("h3",{id:"\u53c2\u8003\u4ee3\u7801-8"},"\u53c2\u8003\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public List<String> restoreIpAddresses(String s) {\n    List<String> result = new LinkedList<>();\n    helper(s, 0, 0, "", "", result);\n\n    return result;\n}\n\nprivate void helper(String s, int index, int segIndex,\n    String seg, String ip, List<String> result) {\n    if (index == s.length() && segIndex == 3 && isValidSeg(seg)) {\n        result.add(ip + seg);\n    } else if (index < s.length() && segIndex <= 3) {\n        char ch = s.charAt(index);\n        if (isValidSeg(seg + ch)) {\n            helper(s, index + 1, segIndex, seg + ch, ip, result);\n        }\n\n        if (seg.length() > 0 && segIndex < 3) {\n            helper(s, index, segIndex + 1, "", ip + seg + ".", result);\n        }\n    }\n}\n\nprivate boolean isValidSeg(String seg) {\n    return Integer.valueOf(seg) <= 255\n        && (seg.equals("0") || seg.charAt(0) != \'0\');\n}\n')))}m.isMDXComponent=!0}}]);