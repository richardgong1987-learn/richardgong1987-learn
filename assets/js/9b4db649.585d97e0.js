"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[5811],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(r),d=o,m=g["".concat(l,".").concat(d)]||g[d]||p[d]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},75193:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return g}});var n=r(83117),o=r(80102),a=(r(67294),r(3905)),i=["components"],s={},l="4.10 \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868",u={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger",isDocsHomePage:!1,title:"4.10 \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nestInteger.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4.6 \u4e00\u4e2a\u51fd\u6570\u89e3\u51b3 nSum \u95ee\u9898",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/nSum"},next:{title:"4.2 \u56de\u6eaf\u7b97\u6cd5\u6700\u4f73\u5b9e\u8df5\uff1a\u89e3\u6570\u72ec",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u7b97\u6cd5\u601d\u7ef4\u7cfb\u5217/sudoku"}},c=[],p={toc:c};function g(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"410-\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868"},"4.10 \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868"),(0,a.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/flatten-nested-list-iterator"},"341.\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u666e\u901a\u89e3\u6cd5"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class NestedIterator implements Iterator<Integer> {\n\n    private Iterator<Integer> it;\n    \n    public NestedIterator(List<NestedInteger> nestedList) {\n        // \u5b58\u653e\u5c06 nestedList \u6253\u5e73\u7684\u7ed3\u679c\n        List<Integer> result = new LinkedList<>();\n        for (NestedInteger node : nestedList) {\n            // \u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u904d\u5386\n            traverse(node, result);\n        }\n        // \u5f97\u5230 result \u5217\u8868\u7684\u8fed\u4ee3\u5668\n        this.it = result.iterator();\n    }\n\n    public Integer next() {\n        return it.next();\n    }\n\n    public boolean hasNext() {\n        return it.hasNext();\n    }    \n    \n    // \u904d\u5386\u4ee5 root \u4e3a\u6839\u7684\u591a\u53c9\u6811\uff0c\u5c06\u53f6\u5b50\u8282\u70b9\u7684\u503c\u52a0\u5165 result \u5217\u8868\n    private void traverse(NestedInteger root, List<Integer> result) {\n        if (root.isInteger()) {\n            // \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\n            result.add(root.getInteger());\n            return;\n        }\n        // \u904d\u5386\u6846\u67b6\n        for (NestedInteger child : root.getList()) {\n            traverse(child, result);\n        }\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u8fdb\u9636\u601d\u8def"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class NestedIterator implements Iterator<Integer> {\n    private LinkedList<NestedInteger> list;\n\n    public NestedIterator(List<NestedInteger> nestedList) {\n        // \u4e0d\u76f4\u63a5\u7528 nestedList \u7684\u5f15\u7528\uff0c\u662f\u56e0\u4e3a\u4e0d\u80fd\u786e\u5b9a\u5b83\u7684\u5e95\u5c42\u5b9e\u73b0\n        // \u5fc5\u987b\u4fdd\u8bc1\u662f LinkedList\uff0c\u5426\u5219\u4e0b\u9762\u7684 addFirst \u4f1a\u5f88\u4f4e\u6548\n        list = new LinkedList<>(nestedList);\n    }\n\n    public Integer next() {\n        // hasNext \u65b9\u6cd5\u4fdd\u8bc1\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u6574\u6570\u7c7b\u578b\n        return list.remove(0).getInteger();\n    }\n\n    public boolean hasNext() {\n        // \u5faa\u73af\u62c6\u5206\u5217\u8868\u5143\u7d20\uff0c\u76f4\u5230\u5217\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u6570\u7c7b\u578b\n        while (!list.isEmpty() && !list.get(0).isInteger()) {\n            // \u5f53\u5217\u8868\u5f00\u5934\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u5217\u8868\u7c7b\u578b\u65f6\uff0c\u8fdb\u5165\u5faa\u73af\n            List<NestedInteger> first = list.remove(0).getList();\n            // \u5c06\u7b2c\u4e00\u4e2a\u5217\u8868\u6253\u5e73\u5e76\u6309\u987a\u5e8f\u6dfb\u52a0\u5230\u5f00\u5934\n            for (int i = first.size() - 1; i >= 0; i--) {\n                list.addFirst(first.get(i));\n            }\n        }\n        return !list.isEmpty();\n    }\n}\n")))}g.isMDXComponent=!0}}]);