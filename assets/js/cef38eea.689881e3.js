"use strict";(self.webpackChunkrichardgong_1987_learn=self.webpackChunkrichardgong_1987_learn||[]).push([[6844],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return d}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),i=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=i(e.components);return n.createElement(u.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=i(t),d=o,f=m["".concat(u,".").concat(d)]||m[d]||s[d]||a;return t?n.createElement(f,c(c({ref:r},p),{},{components:t})):n.createElement(f,c({ref:r},p))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},42816:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return i},toc:function(){return p},default:function(){return m}});var n=t(83117),o=t(80102),a=(t(67294),t(3905)),c=["components"],l={},u="3.4 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4e3a\u4ec0\u4e48\u90a3\u4e48\u96be\u7b97",i={unversionedId:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570",id:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570",title:"3.4 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4e3a\u4ec0\u4e48\u90a3\u4e48\u96be\u7b97",description:"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a",source:"@site/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570.md",sourceDirName:"c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217",slug:"/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570",editUrl:"https://github.com/richardgong1987-learn/richardgong1987-learn/edit/master/website/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u6570.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3.8 \u7279\u6b8a\u6570\u636e\u7ed3\u6784\uff1a\u5355\u8c03\u961f\u5217",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5355\u8c03\u961f\u5217"},next:{title:"4.7 \u62c6\u89e3\u590d\u6742\u95ee\u9898\uff1a\u5b9e\u73b0\u8ba1\u7b97\u5668",permalink:"/richardgong1987-learn/docs/c-computer/AlgorithmsDataStructures/labuladong\u7b97\u6cd5\u5c0f\u6284\u4ee3\u7801/\u6570\u636e\u7ed3\u6784\u7cfb\u5217/\u5b9e\u73b0\u8ba1\u7b97\u5668"}},p=[],s={toc:p};function m(e){var r=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"34-\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4e3a\u4ec0\u4e48\u90a3\u4e48\u96be\u7b97"},"3.4 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4e3a\u4ec0\u4e48\u90a3\u4e48\u96be\u7b97"),(0,a.kt)("p",null,"\u672c\u6587\u5bf9\u5e94\u7684\u529b\u6263\u9898\u76ee\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/count-complete-tree-nodes"},"222.\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int countNodes(TreeNode root) {\n    TreeNode l = root, r = root;\n    // \u8bb0\u5f55\u5de6\u3001\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\n    int hl = 0, hr = 0;\n    while (l != null) {\n        l = l.left;\n        hl++;\n    }\n    while (r != null) {\n        r = r.right;\n        hr++;\n    }\n    // \u5982\u679c\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u540c\uff0c\u8bf4\u660e\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\n    if (hl == hr) {\n        return (int)Math.pow(2, hl) - 1;\n    }\n    // \u5982\u679c\u5de6\u53f3\u9ad8\u5ea6\u4e0d\u540c\uff0c\u5219\u6309\u7167\u666e\u901a\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u8ba1\u7b97\n    return 1 + countNodes(root.left) + countNodes(root.right);\n}\n")))}m.isMDXComponent=!0}}]);